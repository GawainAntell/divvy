[{"path":"https://gawainantell.github.io/divvy/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://gawainantell.github.io/divvy/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://gawainantell.github.io/divvy/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://gawainantell.github.io/divvy/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://gawainantell.github.io/divvy/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://gawainantell.github.io/divvy/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://gawainantell.github.io/divvy/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://gawainantell.github.io/divvy/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://gawainantell.github.io/divvy/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://gawainantell.github.io/divvy/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://gawainantell.github.io/divvy/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://gawainantell.github.io/divvy/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://gawainantell.github.io/divvy/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://gawainantell.github.io/divvy/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://gawainantell.github.io/divvy/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://gawainantell.github.io/divvy/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://gawainantell.github.io/divvy/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://gawainantell.github.io/divvy/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://gawainantell.github.io/divvy/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://gawainantell.github.io/divvy/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://gawainantell.github.io/divvy/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://gawainantell.github.io/divvy/articles/habitat-rangesize-case-study.html","id":"goals-and-limitations-of-the-vignette","dir":"Articles","previous_headings":"","what":"Goals and limitations of the vignette","title":"Environmental and geographic standardisation case study","text":"vignette written model realistic project flow ecological occurrence data, providing example uses divvy functions R code chunks analyse geographic range size disparities comparison categories. data hypothesis representative many real palaeobiology studies, hope serving template comparing ecology environments, regions, clades—instance, investigations whether diversity greater Gondwanaland Laurasia, whether biogeographic connectedness greater within reefal non-reefal assemblages. Results herein taken conclusive answer example research question. publication-quality study, ideally one vet taxonomic environmental assignments original public database download, instance. Similarly, vignette illustrates two lines analysis, additional follow-inquiries prudent pursue arguing definitive palaeoecological interpretation results research community. vignette consists following parts: Background example research question Formatting point occurrence data Developing environmental categories (raster data) Categorising taxon preferences environments Spatial subsampling regions equal area dispersion Hypothesis testing assemblage-based range-size metric Hypothesis testing per-taxon range-size metrics References","code":""},{"path":"https://gawainantell.github.io/divvy/articles/habitat-rangesize-case-study.html","id":"background-on-geographic-ranges-between-marine-environments","dir":"Articles","previous_headings":"","what":"Background on geographic ranges between marine environments","title":"Environmental and geographic standardisation case study","text":"Palaeobiologists often track ecological parameters time, , main divvy package vignette illustrates, crucial standardise differences spatial coverage time steps. However, equally important apply spatial standardisation comparisons environment habitat types, even data occur within one time step. instance, consider two habitat types cover different geographic extents. determine fairly habitat hosts diverse communities, one must account difference spatial coverage. first subsampling habitat type equivalent spatial units, one can directly fairly compare richness ecological metrics environments. marine realm, one important environmental axes ecological differentiation water depth. Diversity, geographic range size, aspects community structure vary along gradient near-shore deep-water environments. , divide environmental spectrum coarsely shallow (proximal) vs. deep (distal) marine habitats. ‘Shallow’ habitats encompass deltaic, (sub)tidal, shelf margin environments. ‘Deep’ habitats include continental slope offshore settings, generally beginning 140 m (Durán Guillén 2018). ecological attribute case study focusses geographic range size, trait widespread importance. instance, range size determines extinction risk large degree (Harnik, Simpson, Payne 2012; Saupe et al. 2015). Range size might influence origination propensity well, although researchers dispute whether relationship positive (Rosenzweig 1995; Maurer Nott 2001), negative (Hansen 1980; Jablonski Roy 2003), unimodal (Gaston 2003; Allmon Martin 2014). environmental niche breadth taxon strongly controls geographic distribution; maximum attainable extent taxon’s range size extent occurrence taxon’s suitable habitat. Two consequences relationship (1) taxa broad niches (generalists eurytopic taxa) expected occupy larger ranges narrow niches (specialists stenotopic taxa), (2) environments within given specialisation, larger geographic distribution habitats permits taxa occupy larger ranges. Taxa may restricted suitable environmental conditions predict (realised niche breadth), due biotic historic factors, taxa exceed bounds set environmental suitability. Since environmental characteristics homogeneous cold, dark waters deep sea topologic complexity shallow settings, ecologists long theorised geographic ranges larger deep-dwelling shallow-water species (Coe 1946; McClain Hardy 2010; Costello Chaudhary 2017). empirical tests hypothesis relied upon modern data, however, relatively little evidence periods Earth history ocean circulation continental configuration entirely unlike today. following sections walk analysis test expectations geographic ranges wider (1) eurytopic stenotopic taxa (2) deep- shallow-water taxa, using brachiopod occurrences Silurian (444-419 Ma) recorded Paleobiology Database (PBDB). Brachiopoda diverse clade made large component Paleozoic benthic communities (Close et al. 2020; Rojas et al. 2021). Paleozoic, much world’s landmass coalesced southermost latitudes Gondwanaland, remaining continents scattered equator separated Iapetus, Paleo-Tethys, Rheic, Panthalassic oceans (map ). Hence, geometry cosmopolitan marine species’ range Silurian differ distinctly cosmopolitan range today. Spatial subsampling crucial addressing research questions preserved area distribution shallow deep-water habitats also differ .","code":""},{"path":"https://gawainantell.github.io/divvy/articles/habitat-rangesize-case-study.html","id":"prepare-taxonomic-occurrence-data","dir":"Articles","previous_headings":"","what":"Prepare taxonomic occurrence data","title":"Environmental and geographic standardisation case study","text":"PBDB downloads (1) marine collections (2) Brachiopoda occurrences accepted names genus-ranking available attached datasets divvy package. datasets subset relevant columns cleaned remove records missing coordinates. information, load package query data objects console ?collSilur ?occSilur. script download vet raw data available format-data.R within GitHub repository data-raw folder (link). taxonomic hierarchy stratigraphic ranges occurrence data standardised Sepkoski Compendium already, following fossilbrush package vignette (Flannery-Sutherland et al. 2022). element cleaning removal taxa occur (‘space-time singletons’ sensu Antell et al. (2020)). records contain insufficient information contribute geographic range-size calculations. step removes 52 taxa singular occurrence records. disregard trivial differences coordinate values points adjacent localities, next data treatment conversion vector (point) data raster grid cells. PBDB record, ID centroid coordinates encompassing raster cell saved new columns. cell values used spatial calculations later improve computation time substantially compared operations vector point data.","code":"# terra and sf have all the necessary helper functions for spatial operations library(terra) library(sf) library(divvy) data(collSilur) data(occSilur) nmFreq <- table(occSilur$genus) sss <- nmFreq[nmFreq == 1] |> names() sssRows <- occSilur$genus %in% sss occSilur <- occSilur[ !sssRows, ] length(sss) #> [1] 52 # initialise Equal Earth projected coordinates rWorld <- rast() prj <- 'EPSG:8857' rPrj <- project(rWorld, prj, res = 200000) # 200,000m is approximately 2 degrees values(rPrj) <- 1:ncell(rPrj)  # coordinate column names for the current and target coordinate reference system xyCartes <- c('paleolng','paleolat') xyCell   <- c('cellX','cellY')  # collection data llColl <- vect(collSilur, geom = xyCartes, crs = 'epsg:4326') prjColl <- project(llColl, prj) collSilur$cell <- cells(rPrj, prjColl)[,'cell'] collSilur[, xyCell] <- xyFromCell(rPrj, collSilur$cell)  # taxon occurrences llOccs <- vect(occSilur, geom = xyCartes, crs = 'epsg:4326') prjOccs <- project(llOccs, prj) occSilur$cell <- cells(rPrj, prjOccs)[,'cell'] occSilur[, xyCell] <- xyFromCell(rPrj, occSilur$cell)"},{"path":"https://gawainantell.github.io/divvy/articles/habitat-rangesize-case-study.html","id":"categorise-environment-associated-with-occurrences","dir":"Articles","previous_headings":"","what":"Categorise environment associated with occurrences","title":"Environmental and geographic standardisation case study","text":"compare ecological parameters preferred environments, 23 categories PBDB environment field must first reclassified binary variable proximal deep-water settings. following division marine environments copied scripts Antell et al. (2020), adapted classification Nürnberg Aberhan (2013). accurate environmental information associated directly occurrence records. available, information script prioritise. However, many instances blank indeterminate environment field. cases, way infer probable environment determine predominant environment local grid cell based environment recorded PBDB collections cell. collection PBDB can contain number occurrences number clades tied point coordinate—therefore, collections rich source environmental data largely independent occurrences individual clade. divvy provides classRast() function convert environmental occurrence points raster grid dominant environmental class cell. use , function classifies grid cells proximal deep-water whenever 80% collections affiliated single environment. template raster passed classRast() resolution, extent, coordinate reference system applied occurrence data. Predominant environment recorded PBDB collections plot environmental distribution inferred collection data traces mid-latitude continents (figured ), albeit gaps. occurrences appear along coasts Gondwanaland, perhaps largely due -sampling -reporting corresponding modern continents relative North America Europe. Also note sampling northern extents Laurasia occurs almost exclusively deep-water settings. now possible infer binary water depth brachiopod occurrence records. available, classification reflect environment directly associated occurrences, otherwise inferences collections-based raster. quick inspection reveals roughly equal numbers occurrences environment. However, half many shallow deep-water grid cells indicated marine collections—result points necessity subsampling. Without accounting greater observation proximal habitats, shallow-water specialists turn equal larger geographic occupancies deep-water specialists might impossible tell result due purely sampling also ecology. Inspection also reveals majority environments inferred collection data nearby match environments associated occurrence records directly. discrepancies occur collection-derived environment indeterminate occurrence data contained specific environment terms.","code":"proxTerms <- c(\"coastal indet.\", \"delta front\", \"delta plain\",                \"deltaic indet.\", \"estuary/bay\", \"foreshore\", \"interdistributary bay\",                \"lagoonal\", \"lagoonal/restricted shallow subtidal\",                \"marginal marine indet.\", \"open shallow subtidal\",                \"fluvial-deltaic indet.\", \"paralic indet.\",                \"peritidal\", \"prodelta\", \"sand shoal\",                \"shallow subtidal indet.\", \"shoreface\",                \"transition zone/lower shoreface\",                \"intrashelf/intraplatform reef\", \"reef, buildup or bioherm\",                \"perireef or subreef\", \"platform/shelf-margin reef\") deepTerms <- c(\"basinal (carbonate)\", \"basinal (siliceous)\",                \"basinal (siliciclastic)\", \"deep-water indet.\",                \"deep subtidal indet.\", \"deep subtidal ramp\",                \"deep subtidal shelf\", \"offshore\", \"offshore indet.\",                \"offshore shelf\", \"slope\", \"submarine fan\", \"offshore ramp\",                \"basin reef\", \"slope/ramp reef\") collSilur$bath <- NA collSilur$bath[collSilur$environment %in% proxTerms] <- 'prox' collSilur$bath[collSilur$environment %in% deepTerms] <- 'deep' bathRast <- classRast(rPrj, dat = collSilur, cutoff = 0.8,                       xy = xyCell, env = 'bath') plot(bathRast, col = c(\"#1B9E77\", \"#D95F02\", \"black\")) # create a new 'bathCell' column to note the collections-inferred environment occSilur$bathCell <- occSilur$bath <- extract(bathRast, prjOccs)[['mainClass']]  # refine the enviro where possible based on observations directly linked to occs occSilur$bath[occSilur$environment %in% proxTerms] <- 'prox' occSilur$bath[occSilur$environment %in% deepTerms] <- 'deep' table(occSilur$bath) # environment inferred directly from records #>  #>   deep   prox indet.  #>   4966   4124   2035 freq(bathRast, bylayer = FALSE) #>    value count #> 1   deep   141 #> 2   prox   226 #> 3 indet.    70 # what proportion of environments associated with individual records # match environmental inferences from nearby collections' data? which(occSilur$bath == occSilur$bathCell) |>   length()/nrow(occSilur) #> [1] 0.6516729 # compare number of indeterminate enviro from collections vs above from records table(occSilur$bathCell) #>  #>   deep   prox indet.  #>   3616   3330   4158"},{"path":"https://gawainantell.github.io/divvy/articles/habitat-rangesize-case-study.html","id":"assign-per-taxon-environmental-preferences","dir":"Articles","previous_headings":"","what":"Assign per-taxon environmental preferences","title":"Environmental and geographic standardisation case study","text":"Now data standardised raster gridding environmental classification, possible infer environmental preferences niche breadth taxa. custom function labels focal taxon specialist environment threshold proportion occurrences (, 70%) lie within single habitat type. simple way split data comparison groups used analysis divide occurrence dataset three data.frames: one deep-water specialists, one proximal-environment specialists, one eurytopic taxa respect depth. data structure straightforward illustrate subsampling section way proceed analysis; instance, one organise data subsets list array instead, perform subsampling across structure’s indices. 70% threshold used define taxon affinities leads approximately equal numbers deep eurytopic taxa smaller sample proximal specialists.","code":"# categorise preferences as binary or nonspecific/eurytopic pref <- function(env, cutoff){   envTbl <- table(env)   if (sum(envTbl[1:2])==0) { 'unk' } else {     envTbl <- envTbl[1:2] / sum(envTbl[1:2]) # proportional enviro abundance     if (any(envTbl[1:2] > cutoff)) { # check if either envrio is predominant       ifelse(envTbl[[1]] > cutoff, names(envTbl)[1], names(envTbl)[2])     } else { 'both' }   } } # The bathymetry column of occurrences is an ordered factor, so levels # 1 and 2 subset by the function correspond to the two environment types levels(occSilur$bath) #> [1] \"deep\"   \"prox\"   \"indet.\" # tag each row as from a taxon with deep, proximal, or eurytopic preference taxa <- unique(occSilur$genus) occSilur$pref <- NA cutoff <- 0.7 for (tax in taxa){  taxBool <- occSilur$genus == tax  envOccs <- occSilur$bath[taxBool]  occSilur$pref[taxBool] <- pref(envOccs, cutoff) } deep <- occSilur[ occSilur$pref == 'deep', ] |>   uniqify(taxVar = 'genus', xy = xyCell) prox <- occSilur[ occSilur$pref == 'prox', ] |>   uniqify(taxVar = 'genus', xy = xyCell) eury <- occSilur[ occSilur$pref == 'both', ] |>   uniqify(taxVar = 'genus', xy = xyCell) # the divvy uniqify() function removes duplicate taxon-cell combinations # for smaller memory use and faster calculations below  # how many taxa specialise in each? taxaD <- unique(deep$genus) taxaP <- unique(prox$genus) taxaE <- unique(eury$genus) paste(length(taxaD), 'deep;', length(taxaP), 'shallow;', length(taxaE), 'both') #> [1] \"94 deep; 61 shallow; 100 both\""},{"path":"https://gawainantell.github.io/divvy/articles/habitat-rangesize-case-study.html","id":"spatially-subsample-each-environment","dir":"Articles","previous_headings":"","what":"Spatially subsample each environment","title":"Environmental and geographic standardisation case study","text":"now appropriate point workflow standardise spatial coverage occurrences comparison group. divvy provides several options spatial subsampling functions; code chunk , apply cookies() subsampling routine datasets deep, proximal, eurytopic taxa. arguments reps, siteQuota, radius define number subsampling iterations run, number localities include subsample, maximum radius circular subsampling region, respectively. value reps set number high enough ensure possible points captured least one subsample, keeping returned object (list subsampled data.frames) manageable size. Increasing number reps slightly prolongs computational time subsampling linearly slow runtime range-size calculations subsamples following sections. Phanerozoic analyses, Antell et al. (2020) performed 500 replicates circular subsampling per time step, Close et al. (2017) 100 (20 replicates 5 regions defined minimum spanning trees). values siteQuota radius trade-increasing sample size localities within subsample precisely characterise geographic ranges limiting total extent subsampling region exceed approximate size ocean basin biogeographic zone. details subsampling using divvy, including clustr() function define subsamples based minimum spanning tree diameter instead circular regional constraints, consult vignettes Antell, Benson, Saupe (accepted).","code":"reps <- 500 # number of subsamples to draw siteQuota <- 15 # number of sites (equal-area grid cells) in each subsample r <- 1000 # radial distance in km  set.seed(8) sampD <- cookies(dat = deep,                  xy = xyCell, iter = reps,                  nSite = siteQuota,                  r = r, weight = TRUE,                  crs = prj, output = 'full')  set.seed(9) sampP <- cookies(dat = prox,                  xy = xyCell, iter = reps,                  nSite = siteQuota,                  r = r, weight = TRUE,                  crs = prj, output = 'full')  set.seed(10) sampE <- cookies(dat = eury,                  xy = xyCell, iter = reps,                  nSite = siteQuota,                  r = r, weight = TRUE,                  crs = prj, output = 'full')"},{"path":"https://gawainantell.github.io/divvy/articles/habitat-rangesize-case-study.html","id":"summed-common-occurrence-rate-between-environments","dir":"Articles","previous_headings":"","what":"Summed Common Occurrence Rate between environments","title":"Environmental and geographic standardisation case study","text":"need parameterise geographic range sizes way make quantitative comparisons ecological groups. One way measure cosmopolitanism calculated assemblage-level data (rather individual taxa), Summed Common species/taxon Occurrence Rate (SCOR). SCOR reflects degree taxa common/widespread decoupled richness abundance (Hannisdal, Henderiks, Liow 2012). divvy provides sdSumry() function compute summary statistics geographic coverage diversity dataset, including SCOR; conveniently, sdSumry() can take list subsampled occurrence data subsets data argument return single data.frame columns summary variables row subsample. SCOR calculated sum across taxa log probability incidence: widespread taxa make large contribution assemblage SCOR, rare taxa relatively little influence. taxon present sampled locations, log probability incidence infinite. Infinity nonsensical empirical comparison, let’s screen subsamples values (12 total, 1500 subsamples). permutation hypothesis tests , ideal comparison groups match sample size. previous step removed 10 samples one group, 2 another, none third—difference remedied omitting another 8 10 samples latter two groups, respectively. Samples selected random. However, one argue unfairly increase odds supporting hypothesis larger ranges deep shallow habitats randomly omit 10 deep samples selectively omit 10 shallow samples least one taxon universally distributed. conservative comparison, one instead omit deep eurytopic samples largest values SCOR. Ultimately, choice perform selection step makes little difference results, affects 2% subsamples. last can compare degree taxa ecological group widespread, within normalised amounts habitat. various test statistics one calculate. custom functions bootstrapping approach capitalises existing division subsamples generate nonparametric estimates probable SCOR values one group exceed another. apply boostrapping test, results indicate random region deep-water habitat contains taxa widespread ranges proximal habitat two-thirds time. Assemblages eurytopic taxa random region almost always contained representatives widespread ranges assemblages either habitat specialist. Another way one compare SCOR groups inspecting distribution values comparison group. Overall, SCOR values assemblages deep-water taxa slightly larger proximal taxa, eurytopic taxa substantially common either groups (SCOR values 4–5 times large). , note results derived spatially standardised data, numbers account fact eurytopic taxa defined many cells suitable habitat available occupy.","code":"metaD <- sdSumry(sampD, xyCell, 'genus', prj) metaP <- sdSumry(sampP, xyCell, 'genus', prj) metaE <- sdSumry(sampE, xyCell, 'genus', prj) # check for infinity values of SCOR and remove them is.infinite(metaD$SCOR) |> any() # none in deep habitat dataset #> [1] FALSE is.infinite(metaP$SCOR) |> any() # but some in the prox habitat dataset #> [1] TRUE is.infinite(metaE$SCOR) |> any() # and some in the all-habitats dataset #> [1] TRUE infP <- is.infinite(metaP$SCOR) metaP <- metaP[ !infP, ] infE <- is.infinite(metaE$SCOR) metaE <- metaE[ !infE, ] sum(infP) #> [1] 10 sum(infE) #> [1] 2 # make sample size (of subsamples) equal, by removing ones with largest SCOR lowestN <- min(nrow(metaD), nrow(metaP), nrow(metaE)) sortD <- order(metaD$SCOR, decreasing = FALSE) metaD <- metaD[sortD, ] metaD <- metaD[1:lowestN, ] sortE <- order(metaE$SCOR, decreasing = FALSE) metaE <- metaE[sortE, ] metaE <- metaE[1:lowestN, ] # how often does the value in group 1 exceed that in group 2 paired samples? # randomly shuffle subsample ordering before comparing testDiff <- function(dat1, dat2, vTest){   n <- nrow(dat1)   dat1 <- dat1[ sample(1:n), ]   dat2 <- dat2[ sample(1:n), ]   h1obs <- dat1[, vTest] > dat2[, vTest]   sum(h1obs) / n }  # repeat the comparison many times to generate a 95% confidence interval diffDist <- function(dat1, dat2, vTest, nReps){   testStatDist <- testDiff(dat1, dat2, vTest) |> replicate(n = nReps)   avg <- mean(testStatDist)   ci95 <- c(0.025, 0.975)   null95 <- quantile(testStatDist, ci95)   names(null95) <- c('lwrCI', 'uprCI')   c(null95, 'mean' = avg) } # do deep-water environments harbor more cosmopolitan taxa? diffDist(metaD, metaP, vTest = 'SCOR', nReps = 1000) #>     lwrCI     uprCI      mean  #> 0.6122449 0.6592347 0.6349163 # what about eurytopic taxa vs. deep-water specialists? diffDist(metaE, metaD, vTest = 'SCOR', nReps = 1000) #>     lwrCI     uprCI      mean  #> 0.9755102 0.9938776 0.9844980 # and if eurytopic species are more widespread than deep, # they'll also be more widespread than proximal-dwellers # (since more deep-water species are widespread than proximal are) diffDist(metaE, metaP, vTest = 'SCOR', nReps = 1000) #>     lwrCI     uprCI      mean  #> 0.9816327 0.9979592 0.9894939 summary(metaD$SCOR) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   2.183   3.174   3.689   3.700   4.153   5.878 summary(metaP$SCOR) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   1.090   2.028   3.297   3.135   3.942   5.550 summary(metaE$SCOR) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   3.383   9.796  15.042  14.959  19.822  28.715"},{"path":"https://gawainantell.github.io/divvy/articles/habitat-rangesize-case-study.html","id":"contrast-results-from-non-subsampled-data","dir":"Articles","previous_headings":"Summed Common Occurrence Rate between environments","what":"Contrast results from non-subsampled data","title":"Environmental and geographic standardisation case study","text":"results conclusions without going effort spatially subsample original occurrence data? comparison average SCOR values listed , following code uses sdSumry() function , time non-standardised full datasets. case overall direction results (deep-water taxa tend slightly widespread shallow-water taxa, eurytopic taxa widespread ). However, subsampling makes difference eurytopic taxa specialists pronounced—SCOR values raw data estimated three times larger (rather 4–5 times larger) compared shallow- deep-water taxa.","code":"sdSumry(deep, xyCell, 'genus', prj) |> round(digits = 2) #>      nOcc nLoc centroidX centroidY latRange greatCircDist meanPairDist minSpanTree SCOR nTax #> [1,]  713  250  -3192759  -1735760   166.32      33567.84       8071.8    130946.3    3   94 sdSumry(prox, xyCell, 'genus', prj) |> round(digits = 2) #>      nOcc nLoc centroidX centroidY latRange greatCircDist meanPairDist minSpanTree SCOR nTax #> [1,]  432  204  -3766508   -957619   166.32      33567.84      7845.98      127435 2.27   61 sdSumry(eury, xyCell, 'genus', prj) |> round(digits = 2) #>      nOcc nLoc centroidX centroidY latRange greatCircDist meanPairDist minSpanTree SCOR nTax #> [1,] 3462  404  -3134553  -1227392   166.32      33567.84      8321.72    168862.1 9.46  100"},{"path":"https://gawainantell.github.io/divvy/articles/habitat-rangesize-case-study.html","id":"average-taxon-range-size-between-environments","dir":"Articles","previous_headings":"","what":"Average taxon range size between environments","title":"Environmental and geographic standardisation case study","text":"preceding section illustrates way one might quantitatively compare ecological variable calculated assemblage community data. many cases one interested taxon-specific variable instead, e.g. body size traits. present section demonstrates way extract summarise focal taxon data subsampled assemblage data. trait interest instance geographic range size, can parameterised variety ways. rangeSize() function divvy returns five measures geographic distribution, two following code compares ecological study groups. code chunk produces list range-size data genera subsamples. lines average values focal taxon consolidate intermediate calculations per-taxon range data final analysis. cases taxon observed given subsample, uninformative geographic range measure except raw occurrence counts. custom argument singletons = FALSE omits cases consideration focal taxon range-size average. taxa never observed multiple times even many subsamples. omitting taxa, sample size genera comparison group shrinks 43 deep water, 24 proximal habitats, 95 occupying breadth depths. previous section, assessing SCOR example comparing assemblage-based metrics, demonstrated bootstrapping approach generate results. complementary example, following chunk uses Frequentist two-sample tests address hypothesis. simplicity, two measure geographic range compared (grid cell occupancy summed length minimum spanning tree); reader easily substitute three datasets (latitudinal range, great circle distance, mean pairwise distance). occurrence occupancy measure range size count data, Wilcoxon (Mann-Whitney) test appropriate nonparametric test. second range-size metric, summed length minimum spanning tree, follows normal distribution square-root transformation; student’s t-test makes parametric comparisons . results per-taxon range size comparisons less clear assemblage-based SCOR comparisons . discernible difference mean range size deep- shallow-water species whether measured occurrence counts minimum spanning tree distances. However, eurytopic taxa still measure larger either specialist group, even conservative thresholds significance: eurytopic taxa occur nearly one grid cell 15 every subsample, span 270 km farther tree length connecting occupied cells. (Recall tree lengths printed square-root transformed.)","code":"# custom function to find all occurrences of focal taxon in a subsample # and return summary measures of geographic distribution from them subsampRange <- function(taxa, df, taxCol, coordCols, crs){   taxRange <- function(taxon){     taxBool <- df[, taxCol] == taxon     if (sum(taxBool) == 0){ # case where taxon unsampled       rep(NA, 7)     } else {       taxCoords <- df[taxBool, coordCols]       rangeSize(taxCoords, crs)     }   }   taxa <- sort(taxa)   rngMat <- sapply(taxa, taxRange)   rownames(rngMat) <- c('occurrences', 'centroidX', 'centroidY', 'latRange',                         'greatCircDist', 'meanPairDist', 'minSpanTree')   rngDf <- t(rngMat) |> data.frame()   return(rngDf) }  # run the function on all subsamples of each comparison set. warning: # these are intensive computations so might be slow (minutes of runtime) rngD <- lapply(sampD, FUN = subsampRange, taxa = taxa, taxCol = 'genus',                coordCols = xyCell, crs = prj) rngP <- lapply(sampP, FUN = subsampRange, taxa = taxa, taxCol = 'genus',                coordCols = xyCell, crs = prj) rngE <- lapply(sampE, FUN = subsampRange, taxa = taxa, taxCol = 'genus',                coordCols = xyCell, crs = prj) # summarize a focal species' range size data across all subsamples taxRange <- function(a, rngL, singletons = FALSE){   tmp <- lapply(rngL, function(x){     aBool <- row.names(x) == a     x[ aBool, ]   })   aDf <- do.call(rbind, tmp)   # option: only consider subsamples where species is sampled multiple times   if (singletons == FALSE){     singl <- aDf$occ == 1     aDf <- aDf[ !singl, ]   }   colMeans(aDf, na.rm = TRUE) }  # apply summary function over all taxa in subsamples of preferred enviro rngAvgD <- sapply(taxaD, taxRange, rngL = rngD) |>   t() |> data.frame() rngAvgP <- sapply(taxaP, taxRange, rngL = rngP) |>   t() |> data.frame() rngAvgE <- sapply(taxaE, taxRange, rngL = rngE) |>   t() |> data.frame() rngAvgD <- rngAvgD[ complete.cases(rngAvgD), ] rngAvgP <- rngAvgP[ complete.cases(rngAvgP), ] rngAvgE <- rngAvgE[ complete.cases(rngAvgE), ] sapply(list('D' = rngAvgD, 'P' = rngAvgP, 'E' = rngAvgE), nrow) #>  D  P  E  #> 43 24 95 wilcox.test(rngAvgD$occurrences, rngAvgP$occurrences, alternative='g') # deep vs shallow #> Warning in wilcox.test.default(rngAvgD$occurrences, rngAvgP$occurrences, : cannot compute exact p-value with ties #>  #>  Wilcoxon rank sum test with continuity correction #>  #> data:  rngAvgD$occurrences and rngAvgP$occurrences #> W = 538, p-value = 0.3876 #> alternative hypothesis: true location shift is greater than 0 wilcox.test(rngAvgE$occurrences, rngAvgD$occurrences, alternative='g') # eurytopic vs deep #>  #>  Wilcoxon rank sum test with continuity correction #>  #> data:  rngAvgE$occurrences and rngAvgD$occurrences #> W = 2794, p-value = 0.0002696 #> alternative hypothesis: true location shift is greater than 0 wilcox.test(rngAvgE$occurrences, rngAvgP$occurrences, alternative='g') # eurytopic vs shallow #>  #>  Wilcoxon rank sum test with continuity correction #>  #> data:  rngAvgE$occurrences and rngAvgP$occurrences #> W = 1603, p-value = 0.001076 #> alternative hypothesis: true location shift is greater than 0 rngAvgD$minSpanTree <- sqrt(rngAvgD$minSpanTree) rngAvgP$minSpanTree <- sqrt(rngAvgP$minSpanTree) rngAvgE$minSpanTree <- sqrt(rngAvgE$minSpanTree) t.test(rngAvgD$minSpanTree, rngAvgP$minSpanTree, alternative='g') # deep vs shallow #>  #>  Welch Two Sample t-test #>  #> data:  rngAvgD$minSpanTree and rngAvgP$minSpanTree #> t = 0.10779, df = 38.352, p-value = 0.4574 #> alternative hypothesis: true difference in means is greater than 0 #> 95 percent confidence interval: #>  -3.728928       Inf #> sample estimates: #> mean of x mean of y  #>  26.92918  26.67442 t.test(rngAvgE$minSpanTree, rngAvgD$minSpanTree, alternative='g') # eurytopic vs deep #>  #>  Welch Two Sample t-test #>  #> data:  rngAvgE$minSpanTree and rngAvgD$minSpanTree #> t = 3.153, df = 82.129, p-value = 0.001129 #> alternative hypothesis: true difference in means is greater than 0 #> 95 percent confidence interval: #>  2.119235      Inf #> sample estimates: #> mean of x mean of y  #>  31.41559  26.92918 t.test(rngAvgE$minSpanTree, rngAvgD$minSpanTree, alternative='g') # eurytopic vs shallow #>  #>  Welch Two Sample t-test #>  #> data:  rngAvgE$minSpanTree and rngAvgD$minSpanTree #> t = 3.153, df = 82.129, p-value = 0.001129 #> alternative hypothesis: true difference in means is greater than 0 #> 95 percent confidence interval: #>  2.119235      Inf #> sample estimates: #> mean of x mean of y  #>  31.41559  26.92918 vars <- c('occurrences', 'minSpanTree') sapply(list('D' = rngAvgD, 'P' = rngAvgP, 'E' = rngAvgE),        function(x) apply(x[,vars], 2, mean)        ) #>                     D         P        E #> occurrences  2.863038  2.898537  3.66210 #> minSpanTree 26.929182 26.674421 31.41559"},{"path":"https://gawainantell.github.io/divvy/articles/habitat-rangesize-case-study.html","id":"contrast-results-from-non-subsampled-data-1","dir":"Articles","previous_headings":"Average taxon range size between environments","what":"Contrast results from non-subsampled data","title":"Environmental and geographic standardisation case study","text":"assemblage-based analysis , can investigate inferences resulted analysing original occurrence data, without subsampling. bootstrapped analysis SCOR values, subsampling happened amplify differences comparison groups. Frequentist analysis per-taxon range size section, subsampling reduced quantitative magnitude differences comparison groups. extent, muting absolute differences makes sense given inherent truncation geographic ranges due subsampling. However, looking back map PBDB data distribution, also possible hypothesise biased sampling artificially inflated group differences. instance, noted plotting map, sampling coverage deep-water habitats extends much farther around Laurasia compared shallow-water habitats. Without accounting influence, impossible attribute greater minimum spanning tree length deep-water species ecology alone. subsampling, although may fewer results clear, analyst can trust results emerge meaningful biological interpretation.","code":"# calculate geographic range size on alloccurrences (not subsampled) unsamp <- subsampRange(taxa, df = occSilur, taxCol = 'genus', coordCols = xyCell, crs = prj) unsampD <- unsamp[rownames(unsamp) %in% taxaD,] unsampP <- unsamp[rownames(unsamp) %in% taxaP,] unsampE <- unsamp[rownames(unsamp) %in% taxaE,]  wilcox.test(unsampD$occurrences, unsampP$occurrences, alternative='g') # deep vs shallow #>  #>  Wilcoxon rank sum test with continuity correction #>  #> data:  unsampD$occurrences and unsampP$occurrences #> W = 2778, p-value = 0.6299 #> alternative hypothesis: true location shift is greater than 0 wilcox.test(unsampE$occurrences, unsampD$occurrences, alternative='g') # eurytopic vs deep #>  #>  Wilcoxon rank sum test with continuity correction #>  #> data:  unsampE$occurrences and unsampD$occurrences #> W = 7878, p-value < 2.2e-16 #> alternative hypothesis: true location shift is greater than 0 wilcox.test(unsampE$occurrences, unsampP$occurrences, alternative='g') # eurytopic vs shallow #>  #>  Wilcoxon rank sum test with continuity correction #>  #> data:  unsampE$occurrences and unsampP$occurrences #> W = 5177.5, p-value = 5.463e-14 #> alternative hypothesis: true location shift is greater than 0 unsampE$minSpanTree <- sqrt(unsampE$minSpanTree) unsampD$minSpanTree <- sqrt(unsampD$minSpanTree) unsampP$minSpanTree <- sqrt(unsampP$minSpanTree) t.test(unsampD$minSpanTree, unsampP$minSpanTree, alternative='g') # deep vs shallow #>  #>  Welch Two Sample t-test #>  #> data:  unsampD$minSpanTree and unsampP$minSpanTree #> t = 1.4578, df = 128.32, p-value = 0.07368 #> alternative hypothesis: true difference in means is greater than 0 #> 95 percent confidence interval: #>  -2.172339       Inf #> sample estimates: #> mean of x mean of y  #> 105.78370  89.87555 t.test(unsampE$minSpanTree, unsampD$minSpanTree, alternative='g') # eurytopic vs deep #>  #>  Welch Two Sample t-test #>  #> data:  unsampE$minSpanTree and unsampD$minSpanTree #> t = 5.5061, df = 169.6, p-value = 6.687e-08 #> alternative hypothesis: true difference in means is greater than 0 #> 95 percent confidence interval: #>  41.22068      Inf #> sample estimates: #> mean of x mean of y  #>  164.7019  105.7837 t.test(unsampE$minSpanTree, unsampD$minSpanTree, alternative='g') # eurytopic vs shallow #>  #>  Welch Two Sample t-test #>  #> data:  unsampE$minSpanTree and unsampD$minSpanTree #> t = 5.5061, df = 169.6, p-value = 6.687e-08 #> alternative hypothesis: true difference in means is greater than 0 #> 95 percent confidence interval: #>  41.22068      Inf #> sample estimates: #> mean of x mean of y  #>  164.7019  105.7837"},{"path":[]},{"path":"https://gawainantell.github.io/divvy/articles/subsampling-concept-walkthrough.html","id":"circular-subsampling","dir":"Articles","previous_headings":"","what":"Circular subsampling","title":"How subsampling works","text":"divvy package implements circular subsampling cookies() function, -named routine iteratively cuts equal-area sections sampled world, just cookie cutter turns irregular sheet dough batch equivalent shapes. method developed Antell et al. (2020).","code":""},{"path":"https://gawainantell.github.io/divvy/articles/subsampling-concept-walkthrough.html","id":"basic-procedure","dir":"Articles","previous_headings":"Circular subsampling","what":"Basic procedure","title":"How subsampling works","text":"subsampling function operates rasterised data, .e. taxon occurrences allocated spatial grid cells. Within cell, taxon present absent; subsampling routine ignores abundance counts duplicate occurrences. Cells divided latitude-longitude, e.g. 1-degree resolution, subsampling fairer cells equal area regardless latitudinal position. Equal Earth projection example equal-area raster system. Occurrences rasterised presence-absence values spatial grid cells. Silhouettes indicate different taxa. procedure runs iteratively, returning specified number subsamples. process collecting single subsample demonstrated . First, single occupied cell selected random. starting cell ‘seed point’. One occupied cell drawn starting point new subsample. control spatial extent sampling, seed cell buffered circular area given radius. constraint necessary type diversity analysis helps standardise beta diversity, amount taxonomic turnover increasingly distant sites. seed point buffered given radius (, r = 2 cell-width units) constraint spatial extent subsample. step onward, cells considered subsample centroid coordinates fall within buffer area. Included cells make pool site rarefaction. encompassing circle laid indiscriminately regard geography, pool size vary amount sea/land coverage region well amount scientific effort discover collect sites. crucial standardise total area number sites diversity tied sample area species–area effect: regions containing sites tend return taxa regardless true taxonomic richness. Occupied cells centroid coordinates falling inside buffer circle make pool available subsample cells shaded grey. final step subsampling selection given number cells available pool. cells equal area, step standardises total spatial area covered subsample. Cells drawn without replacement, possible obtain subsample least many occupied cells region desired site quota. Cells considered viable seed points lead site pools sufficient size; subsampling function finds excludes inviable cells priori draw subsamples efficiently feasible regions. given number cells (blue, n = 5) drawn randomly, without replacement pool cells buffer circle. Depending argument specified function output, procedure returns coordinates subsampled cells (output = 'locs') data rows occurrences contained cells (output = 'full'). entire subsampling routine repeated specified number iterations. given cell can selected seed point multiple times, possible two subsamples contain identical subsets cells. general, occasional duplication inherent random subsampling inconsequential later analysis. However, original observations limited number extent, may prudent expand radius /reduce required cell quota reduce incidence identical subsamples. check healthy number unique site combinations relative number replications, analyst compare lists included sites subsamples.","code":""},{"path":"https://gawainantell.github.io/divvy/articles/subsampling-concept-walkthrough.html","id":"weighted-cell-selection","dir":"Articles","previous_headings":"Circular subsampling","what":"Weighted cell selection","title":"How subsampling works","text":"baseline method circular subsampling described selects cells random within radial constraint. modification method selects cells probabilistically, weight inversely proportional squared distance central seed cell. probabilistic approach clusters cells subsample tightly avoiding completely deterministic; effectively, modification provides intermediate subsampling strategy baseline circular nearest-neighbor subsampling. occupied cells sparse, cells periphery buffer drawn fill cell quota despite lower selection probability. weighted cell subsampling routine used generate main-text results Antell et al. (2020), although ultimately results unweighted weighted subsampling equivalent. Cell selection probabilities weighted subsampling proportional inverse squared distance center, colored heatmap example. seed cell always included weighted subsamples.","code":""},{"path":"https://gawainantell.github.io/divvy/articles/subsampling-concept-walkthrough.html","id":"nearest-neighbor-subsampling","dir":"Articles","previous_headings":"","what":"Nearest-neighbor subsampling","title":"How subsampling works","text":"clustr() function divvy subsamples sites according proximity, procedure adapted introduced Close et al. (2017, 2020).","code":""},{"path":"https://gawainantell.github.io/divvy/articles/subsampling-concept-walkthrough.html","id":"basic-procedure-1","dir":"Articles","previous_headings":"Nearest-neighbor subsampling","what":"Basic procedure","title":"How subsampling works","text":"clustr() function groups sites together, starting closest coordinates starting point. cookies function, clustering routine ignores abundance counts duplicate occurrences, process generating subsample begins random selection occupied site seed point. One occupied site drawn starting point new subsample. , sites rasterised grid cells. function calculates distance seed point occupied sites. closest site linked seed (first branch minimum spanning tree connecting subsample sites). function (1) calculates pairwise distances point included set occupied sites (2) adds nearest neighbor set. site cluster grows deterministically maximum diameter across point set reaches specified limit. illustration minimum spanning tree connecting occupied sites example region. Starting seed cell (shaded blue), minimum spanning tree (solid blue lines) connects dots occupied sites. maximum diameter tree 5 grid-cell units (dashed line). Like radial constraint circular subsampling, cap cluster diameter attempts standardise beta diversity (spatial turnover taxa). Applying maximum distance 4 cell-width units (twice radius used example cookies), sites excluded cluster built seed point. maximum distance across set included sites ~3.6; adding additional occupied site increase length threshold 4 cell-width units. circular subsampling, analyst experiment diameter threshold values choose spatial bounding extent small enough capture regional diversity differences large enough allow sites around world/study area gathered clusters, rather sit outside . function returns final cluster coordinates (occurrences located thereat, requested), one element list output. many subsamples returned specified number iterations. Due stochastic nature drawing seed points finite number sites available aggregate, possible multiple subsamples contain identical site combinations. Site rarefaction (described ) reduces incidence duplicate clusters subsampling, possible sites drawn chance, circular subsampling. original versions nearest-neighbor subsampling grouped clusters continental region nested analysis within regions making global comparisons Close et al. (2020). exact method cutting trees continental regions differed two papers, regional assignments somewhat automated looking modern-day country codes associated occurrence coordinates. approaches leave decisions analyst track bioregions across time drifting tectonic plates. divvy implementation nearest-neighbor subsampling like bootstrapping, subsamples treated equivalently, irrespective position; full set iterations may analysed automated simultaneous way.","code":""},{"path":"https://gawainantell.github.io/divvy/articles/subsampling-concept-walkthrough.html","id":"site-rarefaction","dir":"Articles","previous_headings":"Nearest-neighbor subsampling","what":"Site rarefaction","title":"How subsampling works","text":"Original versions nearest-neighbor subsampling return sites within cluster meets size completeness specifications Close et al. (2020). noted circular subsampling , however, number sites can vary widely clusters similar extent. average, taxa observed clusters include sites/area species–area effect. Rarefaction references collections (defined Paleobiology Database data structures) one strategy attempt mitigate differences spatial coverage within regional subsamples, direct approach standardising number sites within clusters. Site/cell rarefaction always included cookies() function, optional choice clustr() function, since absent original published uses. Forgoing site rarefaction increases compatibility results generated original published code. Implementing site rarefaction recommended improves comparability circular nearest-neighbor subsampling routines. example , occupied cells drawn randomly without replacement full cluster reach quota 5 sites final subsample. full cluster set (grey dots lines, diameter = 5 units) rarefied given number sites (blue shading, n = 5).","code":""},{"path":[]},{"path":"https://gawainantell.github.io/divvy/articles/subsampling-vignette.html","id":"contents","dir":"Articles","previous_headings":"","what":"Contents","title":"Spatial subsampling tutorial","text":"subsample spatially Prepare Paleobiology Database records Subsampling examples Circular subsampling PBDB collections, references, duplicate entries Nearest-neighbour subsampling Latitudinal subsampling Analysis subsampled data References document introduces rationale spatial subsampling covers common use cases divvy functions, including example R code. Sections discuss ways format data, implement three different subsampling routines, calculate common biodiversity metrics. comprehensive review spatial subsampling theory, applications paleobiology ecology, implementation divvy package, refer Antell, Benson, Saupe (accepted), ‘Spatial standardization taxon occurrence data—call action’.","code":""},{"path":"https://gawainantell.github.io/divvy/articles/subsampling-vignette.html","id":"why-to-subsample-spatially","dir":"Articles","previous_headings":"","what":"Why to subsample spatially","title":"Spatial subsampling tutorial","text":"Biodiversity measures, whether quantified fossil extant data, reflect outcome three types processes: 1. biological processes measurements aim capture, 2. stochastic processes generate random error, 3. observation processes, distribution collecting effort intensity. Compared neontological data, observation densities palaeontological data reflect additional contributions taphonomy (decay preservation processes) sedimentation (burial lithification processes). term ‘sampling’ used herein refer full suite influences many fossil taxa lived place recorded fossil occurrences . Given large number processes involved sampling fossils, unsurprising many palaeo-occurrence datasets, combined effect size unexplained error variable observation probabilities biodiversity parameter estimates greater true biological processes past. relative strength sampling structure compared biological structure well-known issue quantitative palaeobiology therefore received considerable attention. mainstream method standardising sampling biodiversity data (fossil extant) rarefaction, genre statistical method resamples taxon occurrences given threshold sampling completeness. ‘Classical’ rarefaction uses cumulative specimen count proxy sampling completeness, ‘coverage-based’ rarefaction estimates cumulative coverage taxon frequency distribution curve proxy (Alroy 2010; Chao Jost 2012). Examples types rarefaction abound recent palaeobiology literature. Rarefaction largely succeeds producing diversity estimates corrected sampling differences sites, .e. diversity estimates discrete sites (alpha diversity) can compared fairly. However, challenges arise comparing diversity times regions contain multiple sites. Taxonomic composition turns one geographic location another. amount turnover (beta diversity) generally increases distance, relationship known species–area effect. practical terms, greater spatial dispersion area sampling, taxa tend recovered. Sampling processes control dispersion area localities fossil data, makes essential palaeobiologists account spatial coverage sampling conducting biodiversity analyses, regardless use rarefaction (Benson et al. 2021). Without standardising sampling spatial context, estimates biodiversity parameters indiscernible mix true historic values conflated amount observation values. divvy implements several spatial subsampling methods control geographic dispersion area taxon occurrences, analysts can make fairer estimates biodiversity parameters regions time. method iterative, drawing many, comparable spatial replicates.","code":""},{"path":"https://gawainantell.github.io/divvy/articles/subsampling-vignette.html","id":"prepare-paleobiology-database-records","dir":"Articles","previous_headings":"","what":"Prepare Paleobiology Database records","title":"Spatial subsampling tutorial","text":"begin loading divvy package , note geospatial package dependencies units, sf, terra, vegan, iNEXT package taxonomic richness rarefaction. divvy includes attached dataset bivalves, download fossil occurrences Paleobiology Database (PBDB) subset relevant columns minimally cleaned. bivalves contains ca. 8,000 (palaeo)coordinates identifications ca. 500 marine bivalve genera Pliocene. information dataset, query ?bivalves. attached dataset provided example working PBDB-structured occurrence records; formal analyses wise vet downloaded data rigorously, including revising taxonomy, time bin assignments, environmental classifications. fossilbrush package provides palette tools help clean PBDB data. latitude-longitude coordinates PBDB come many different studies, means precision accuracy vary across records. Fossils collected locality may reported different coordinates due purely different GPS equipment, mapping, decimal rounding, example. spatial subsampling procedures put great weight number unique localities region, important avoid inflating site number artificially. One standard way smooth slight discrepancies occurrence positions convert point coordinates (‘vector’ spatial data) grid cells (‘raster’ spatial data)1. Effectively, one lays web study region records position polygons (‘grid cells’) points fall, rather original xy point coordinates. additional advantage raster vector data tremendous increase efficiency spatial computations. Palaeobiologists often convert abundance counts binary presence-absence data taxon occurrences grid cells. practice especially common PBDB data abundance information usually non-standard, recorded . (Read notes duplicate taxon occurrences.) Many PBDB analyses also global extent, makes choice coordinate reference system raster grid important. areas shapes grid cells poles vs. equator can differ widely certain reference systems map projections. code converts latitude-longitude coordinates Equal Earth reference system, equal-area projection world maps. Another option friendly raster grid system icosa package, developed palaeobiologist Ádám Kocsis, creates tessellations pentagons hexagons. polygons approximately equal area shape across globe. spatial resolution grid controlled arguments hexagrid function. can inspect spatial distribution data converting occurrence points spatial features (class contains coordinate system information) plotting basic world map, supplied rnaturalearth rnaturalearthdata packages.","code":"library(divvy)  library(units) library(sf) library(terra) library(vegan) library(iNEXT) data(bivalves) head(bivalves) #>         genus paleolng paleolat collection_no reference_no #> 1        Lima   176.85   -42.69         34849         9315 #> 2 Nemocardium   176.85   -42.69         34849        11706 #> 3      Ostrea   176.85   -42.69         34849        11706 #> 4     Chlamys   176.85   -42.69         34849         9315 #> 5  Pycnodonte  -114.37    33.76         34857         9338 #> 6      Euvola  -114.37    33.76         34857         9338 #>              environment max_ma min_ma          accepted_name #> 1             basin reef  5.333    3.6                   Lima #> 2             basin reef  5.333    3.6 Nemocardium (Pratulum) #> 3             basin reef  5.333    3.6       Ostrea chilensis #> 4             basin reef  5.333    3.6                Chlamys #> 5 marginal marine indet.  5.333    3.6   Pycnodonte heermanni #> 6 marginal marine indet.  5.333    3.6           Euvola keepi nrow(bivalves) #> [1] 8095 length(unique(bivalves$genus)) #> [1] 550 # initialise Equal Earth projected coordinates rWorld <- rast() prj <- 'EPSG:8857' rPrj <- project(rWorld, prj, res = 200000) # 200,000m is approximately 2 degrees values(rPrj) <- 1:ncell(rPrj)  # coordinate column names for the current and target coordinate reference system xyCartes <- c('paleolng','paleolat') xyCell   <- c('cellX','cellY')  # retrieve coordinates of raster cell centroids llOccs <- vect(bivalves, geom = xyCartes, crs = 'epsg:4326') prjOccs <- project(llOccs, prj) bivalves$cell <- cells(rPrj, prjOccs)[,'cell'] bivalves[, xyCell] <- xyFromCell(rPrj, bivalves$cell) occUniq <- uniqify(bivalves, xyCell) ptsUniq <- st_as_sf(occUniq, coords = xyCell, crs = prj)  library(rnaturalearth) library(rnaturalearthdata) library(ggplot2) # for plot visualisation world <- ne_countries(scale = \"medium\", returnclass = \"sf\") worldP <- ggplot(data = world) +   theme_bw() +   geom_sf() +   geom_sf(data = ptsUniq, shape = 17, color = 'blue')  plot(worldP)"},{"path":"https://gawainantell.github.io/divvy/articles/subsampling-vignette.html","id":"subsampling-examples","dir":"Articles","previous_headings":"","what":"Subsampling examples","title":"Spatial subsampling tutorial","text":"divvy offers three approaches spatially subsample data: cookies: Imposes radial constraint spatial bounds subsample standardises area rarefying number localities clustr: Aggregates sites nearest neighbours (connecting minimum spanning tree) impose maximum diameter spatial bounds subsample, optionally rarefies localities bandit: Rarefies number localities within bands equal latitude","code":""},{"path":"https://gawainantell.github.io/divvy/articles/subsampling-vignette.html","id":"circular-subsampling","dir":"Articles","previous_headings":"Subsampling examples","what":"Circular subsampling","title":"Spatial subsampling tutorial","text":"First let’s apply circular subsampling, constrains spatial bounds sample specified radius random start point standardises spatial area sample specified number sites. (Recall sites allocated equal-area polygons preceding section.) radius (1500 km) numbers sites (n = 12) iterations (n = 500) specified match subsampling parameters global analysis Antell et al. (2020). Subsamples returned elements list length iter. output = \"locs\" (default), element data.frame coordinates nSite sites included subsample. output may useful intermediate object run custom functions calculate ecological parameters interest, instance metrics spatial connectedness among fossil sites. can also use location output explore subsample plots earlier map. subsample happens fall along East Gulf Coasts North America. Now note first code chunk section set weight argument cookies() TRUE. Weighting designed cluster subsample sites compactly random selection; , distant points tend left . Weighting achieved increasing probability drawing site closer falls central occurrence point (‘seed cell’) given subsample. seed cell always included weighted subsamples (necessarily unweighted ones) corresponds first row listed output. visibilise weighted subsample method , let’s extract seed location manually plot circular constraint around . inspection also reveals happen 14 sites region draw subsample 12. demonstrated , location-type output divvy subsampling functions can useful certain cases; however, often researchers want retrieve taxon records. Changing output \"locs\" \"full\", element returned object now contains subset occurrence rows bivalves located sites subsample. output useful analysis final vignette section .","code":"set.seed(1) circLocs <- cookies(dat = bivalves,                       xy = xyCell,                     iter = 500,                      nSite = 12,                      r = 1500, # radial distance in km                     weight = TRUE, # probabilistically aggregate subsampling sites                     crs = prj, # Equal Earth projection                     output = 'locs') length(circLocs) #> [1] 500 circLocs[[1]] #>         cellX   cellY #> 1019 -6543959 4739440 #> 56   -7343959 3539440 #> 7586 -7143959 3939440 #> 1278 -7343959 3939440 #> 1049 -6543959 4539440 #> 2921 -7143959 3539440 #> 1054 -6743959 4339440 #> 1076 -6743959 4539440 #> 122  -7743959 3939440 #> 1251 -7543959 3939440 #> 2065 -7543959 3739440 #> 911  -6543959 4339440 # over-plot the subsample locations smplPts <- st_as_sf(circLocs[[1]], coords = xyCell, crs = prj) worldP +   geom_sf(data = smplPts, shape = 17, color = 'red') cntr <- smplPts[1,] # distances inferred to be meters based on lat-long coord system r <- 1500 buf <- st_buffer(cntr, dist = r*1000)  # over-plot subsample boundary region and included sites worldP +   geom_sf(data = smplPts, shape = 17, color = 'red') +   geom_sf(data = buf, fill = NA, linewidth = 1, color = 'red') inBuf <- st_intersects(ptsUniq, buf, sparse = FALSE)  sum(inBuf) #> [1] 14 set.seed(7) # same parameter values as above except for 'output' circOccs <- cookies(dat = bivalves,                      xy = xyCell,                      iter = 500,                      nSite = 12,                      r = 1500,                      weight = TRUE,                      crs = prj,                     output = 'full') head( circOccs[[8]] ) #>           genus paleolng paleolat collection_no reference_no    environment #> 83      Anadara   -69.82    10.25         41552        11132  marine indet. #> 409  Iliochione   -79.18     0.54         51887        13814       offshore #> 410 Undulostrea   -79.18     0.54         51887        13814       offshore #> 411  Argopecten   -79.18     0.54         51887        13814       offshore #> 412  Argopecten   -79.18     0.54         51881        13814 coastal indet. #> 413        Arca   -79.18     0.54         51881        13814 coastal indet. #>     max_ma min_ma                accepted_name cell    cellX     cellY #> 83   5.333  3.600 Anadara (Larkinia) notabilis 6074 -6543959 1339439.8 #> 409  5.333  2.588      Iliochione callistoides 7101 -7543959  139439.8 #> 410  5.333  2.588          Undulostrea megodon 7101 -7543959  139439.8 #> 411  5.333  2.588       Argopecten ventricosus 7101 -7543959  139439.8 #> 412  5.333  2.588       Argopecten ventricosus 7101 -7543959  139439.8 #> 413  5.333  2.588                         Arca 7101 -7543959  139439.8"},{"path":"https://gawainantell.github.io/divvy/articles/subsampling-vignette.html","id":"pbdb-collections-references-and-duplicate-entries","dir":"Articles","previous_headings":"Subsampling examples","what":"PBDB collections, references, and duplicate entries","title":"Spatial subsampling tutorial","text":"Data fed divvy subsampling functions can contain duplicate taxon–location records, common collections-based format PBDB data entry. instance, subsample output printed shows Argopecten twice coordinates. duplicates stem different collections (#51881 #51887). previous section standardised spatial dispersion area, point rarefy number collections references, , standardisation sampling effort. study developed circular buffer approach regional subsampling (implemented cookies()) avoided rarefying collections/references, step largely redundant rarefying sites/raster grid cells (Antell et al. 2020). number PBDB reference counts marine invertebrate occurrences correlates nearly perfectly grid cell counts (Alroy et al. 2008). Applying rarefaction grid cells collections references compress distribution observed values, reduce statistical power analysis heighten risk overlooking true biological signal (type 2 error). contrast, study developed nearest-neighbour subsampling approach (described ) rarefied collections within references, following Alroy (2014), avoided rarefying sites/cells (Close et al. 2017). richness estimation procedure involved drawing PBDB references, drawing three collections within references, evaluating taxon occurrences within subsampled collections. divvy diversity summary function (sdSumry()) recent study use nearest-neighbour subsamples (Close et al. 2020) call iNEXT implementation coverage-based richness estimation, ignores PBDB collections/references data structure. Therefore, users wishing rarefy collections /references write custom richness estimation scripts adapt Alroy’s Perl scripts. filter duplicate taxon–location records datset, thereby reducing object size saving memory, divvy offers uniqify() function. Omitting duplicate occurrences bivalves removes 5,000 rows.","code":"bivUniq <- uniqify(bivalves, taxVar = 'genus', xyCell) nrow(bivUniq) #> [1] 3061"},{"path":"https://gawainantell.github.io/divvy/articles/subsampling-vignette.html","id":"nearest-neighbour-subsampling","dir":"Articles","previous_headings":"Subsampling examples","what":"Nearest-neighbour subsampling","title":"Spatial subsampling tutorial","text":"mentioned preceding section, papers date analysed spatial subsamples constructed nearest-neighbour method constrained spatial dispersion cumulative area number sites (Close et al. 2017, 2020). backwards compatibility originator publications, clustr() function contains option turn site rarefaction (argument nSite = NULL). However, depending study design may well prudent standardise area/number sites using nearest-neighbour method, mandated circular subsampling method. set site quota either method, use nSite argument. skip site rarefaction instead include locations within cluster maximum diameter deterministically, subsample built given starting location include number sites minimum threshold (, nMin = 3, default). first replicate example contains 17 sites.","code":"set.seed(2) nnLocs <- clustr(dat = bivalves,                   xy = xyCell,                   iter = 500,                   distMax = 3000, # diameter = 2x the circular radius set above                  nSite = 12,                  crs = prj                  ) nnLocs[[1]] #>         cellX      cellY #> 81   -6343959 1339439.78 #> 1891 -7343959  -60560.22 #> 5884 -7343959  539439.78 #> 6477 -7743959 -460560.22 #> 1491 -5743959 1339439.78 #> 2415 -7943959 1139439.78 #> 409  -7543959  139439.78 #> 5916 -6543959 1539439.78 #> 1936 -6743959 2339439.78 #> 3887 -7743959 1339439.78 #> 74   -5943959 1339439.78 #> 5751 -7143959 1339439.78 set.seed(2) nnAllSites <- clustr(dat = bivalves,                       xy = xyCell,                       iter = 500,                      distMax = 3000, # diameter = 2x the circular radius set above                      nMin = 3,                      crs = prj                      ) nrow( nnAllSites[[1]] ) #> [1] 17"},{"path":"https://gawainantell.github.io/divvy/articles/subsampling-vignette.html","id":"latitudinal-subsampling","dir":"Articles","previous_headings":"Subsampling examples","what":"Latitudinal subsampling","title":"Spatial subsampling tutorial","text":"Many biological environmental variables interest vary characteristically latitude. Hence, depending research question may exigent control latitudinal differences items comparison, e.g. occurrence data time step predominantly low-latitude fossil localities vs. time step mid-latitude localities. bandit() function returns subsamples given site quota within latitudinal bands given bin resolution/width. Optionally, function ignore hemisphere differences consider absolute latitude. iter argument bandit() specifies number subsamples take within band, rather total number globally. subsamples returned bands containing fewer nSite localities.","code":"bandLocs <- bandit(dat = bivalves,                    xy = xyCell,                    iter = 100, nSite = 12,                     bin = 20, # interval width in degrees                    crs = prj                    # ,absLat = TRUE # optional                    ) nrow(bandLocs[[1]]) # number of sites in one subsampled band #> [1] 12 length(bandLocs) # number of subsamples, tallied across all bands #> [1] 500 unique(names(bandLocs)) # latitudinal degrees of subsampled intervals #> [1] \"[-50,-30)\" \"[-10,10)\"  \"[10,30)\"   \"[30,50)\"   \"[50,70)\""},{"path":"https://gawainantell.github.io/divvy/articles/subsampling-vignette.html","id":"analysis-on-subsampled-data","dir":"Articles","previous_headings":"","what":"Analysis on subsampled data","title":"Spatial subsampling tutorial","text":"sdSumry() function returns summary spatial characteristics dataset/subsample: number unique locations, centroid coordinates, latitudinal range (degrees), great circle distance (km), summed minimum spanning tree length (km) occurrences. sdSumry() also tallies taxa sample performs coverage-based rarefaction (quotaQ supplied) classical rarefaction (quotaN supplied). Rarefied estimates returned along associated 95% confidence interval (estimated iNEXT). coverage-based rarefaction applied, specified coverage level (quotaQ) appropriate estimated coverage original sample. requested quota greater empirically available require diversity extrapolation. sdSumry() returns estimated sample coverage whenever coverage-based rarefaction applied. Also note, homogeneous evenness underlying assumption fair comparisons coverage-based rarefaction diversity estimates. help check assumption, sdSumry() also returns Pielou’s J evenness metric whenever coverage-based rarefaction applied. Evenness metrics area ongoing theoretical debate methodological development ecology, use Pielou’s J divvy reflection metrics’ widespread use rather singular endorsement. J estimates vary widely time intervals categories comparison, worth investigating evenness differences nuanced detail, instance calculating variety metrics. Compare summary data original dataset vs. single spatial subsample. First consider summary spatial metrics. geographic dispersion bivalves occurrences enormous—indicates spatial standardisation necessary derive meaningful biological metrics. compare diversity estimates global vs. spatially-subsampled dataset, richness estimates much higher global dataset, regardless rarefaction method. result demonstrates species–area effect described introduction: even rarefaction applied quota coverage level, diversity estimates larger datasets greater spatial coverage, rarefaction fails control spatial turnover diversity. Iterative spatial subsampling addresses issue can control beta diversity global occurrence datasets. Even though individual subsample includes fraction total occurrences, data can contribute analyses repeated subsampling. Ecological variables calculated given subsample directly comparable subsamples dataset comparison dataset (e.g. different time step habitat type). code chunk demonstrates calculate summary statistics subsamples Pliocene bivalve occurrences. median taxon count 1500km-radius subsample 162, interquartile range 126–183 taxa. range can interpreted loosely primary regional variation estimated palaeodiversity.","code":"unsamp <- sdSumry(dat = bivalves,                    taxVar = 'genus',                   collections = 'collection_no',                   xy = xyCell,                   quotaQ = 0.8, quotaN = 100,                   omitDom = TRUE,                   crs = prj) unsamp #>   nColl nOcc nLoc centroidX centroidY latRange greatCircDist meanPairDist #> 1   863 3061  157 -434404.9   1647720 137.4159      28917.12     11375.07 #>   minSpanTree     SCOR nTax  evenness coverage  SQSdiv SQSlow95 SQSupr95 #> 1    93349.91 20.64401  550 0.9061343   0.9414 323.015 310.6638 335.3662 #>      CRdiv  CRlow95  CRupr95 #> 1 470.9424 454.3334 487.5515 samp1 <- sdSumry(dat = circOccs[[1]],                   taxVar = 'genus',                  collections = 'collection_no',                  xy = xyCell,                  quotaQ = 0.8, quotaN = 100,                   omitDom = TRUE,                  crs = prj) samp1 #>   nColl nOcc nLoc centroidX centroidY latRange greatCircDist meanPairDist #> 1   134  442   12  -7027292   4139440 10.25901      1612.452     779.4877 #>   minSpanTree     SCOR nTax  evenness coverage  SQSdiv SQSlow95 SQSupr95 #> 1    2648.528 46.01033  164 0.9572183   0.8704 136.402 123.5963 149.2078 #>      CRdiv CRlow95  CRupr95 #> 1 219.8183 190.056 249.5806 # warning - it's slow to rarefy diversity for hundreds of subsamples! # this code chunk skips it for quick demonstration purposes sampsMeta <- sdSumry(dat = circOccs,                       taxVar = 'genus',                      collections = 'collection_no',                      xy = xyCell,                      crs = prj                      ) quantile(sampsMeta$nTax, c(0.25, 0.5, 0.75)) #> 25% 50% 75%  #> 126 162 183"},{"path":[]},{"path":"https://gawainantell.github.io/divvy/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gawain Antell. Author, maintainer, copyright holder.","code":""},{"path":"https://gawainantell.github.io/divvy/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Antell GT (2025). “divvy: Spatial Subsampling Biodiversity Occurrence Data.” doi:10.32614/CRAN.package.divvy, R package version 1.0.1, https://CRAN.R-project.org/package=divvy. Antell GT, Benson RBJ, Saupe EE (2024). “Spatial standardization taxon occurrence data—call action.” Paleobiology. doi:10.1017/pab.2023.36.","code":"@Misc{,   title = {divvy: Spatial Subsampling of Biodiversity Occurrence Data},   author = {Gawain T Antell},   year = {2025},   note = {R package version 1.0.1},   url = {https://CRAN.R-project.org/package=divvy},   doi = {10.32614/CRAN.package.divvy}, } @Article{,   author = {Gawain T Antell and Roger B J Benson and Erin E Saupe},   title = {Spatial standardization of taxon occurrence data—a call to action},   year = {2024},   journal = {Paleobiology},   type = {Journal Article},   doi = {10.1017/pab.2023.36}, }"},{"path":"https://gawainantell.github.io/divvy/index.html","id":"divvy","dir":"","previous_headings":"","what":"Spatial Subsampling of Biodiversity Occurrence Data","title":"Spatial Subsampling of Biodiversity Occurrence Data","text":"Divvy diversity geographic regions fair comparison!","code":""},{"path":"https://gawainantell.github.io/divvy/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Spatial Subsampling of Biodiversity Occurrence Data","text":"R package offering spatial subsampling functions biogeography biodiversity studies, whether analysing fossil modern taxon occurrence data, described : Antell, G.T., Benson, R.B., Saupe, E.E. (2024). Spatial standardization taxon occurrence data—call action. Paleobiology, 50(2), 177-193. https://doi.org/10.1017/pab.2023.36. Three types subsampling available standardise number maximum spread (dispersion) sites within region specified size: cookies: Imposes radial constraint spatial bounds subsample standardises area rarefying number localities clustr: Aggregates sites nearest neighbours (connecting minimum spanning tree) impose maximum diameter spatial bounds subsample, optionally rarefies localities bandit: Rarefies number localities within bands equal latitude Additional functions include uniqify subset occurrence dataset unique taxon-coordinate combinations, sdSumry calculate basic spatial coverage diversity metadata dataset subsamples, rangeSize calculate five measures geographic range size, classRast generate raster containing common environment trait point occurrences falling grid cell. vignettes accompanying package, demonstrate use cases divvy functions describe common considerations analyses taxonomic occurrence data. can view compiled documents package website ‘Getting started’.","code":""},{"path":"https://gawainantell.github.io/divvy/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Spatial Subsampling of Biodiversity Occurrence Data","text":"can install newest release divvy CRAN: Alternatively, can install development version divvy GitHub help devtools:","code":"install.packages('divvy') # install.packages('devtools') devtools::install_github('GawainAntell/divvy')"},{"path":[]},{"path":"https://gawainantell.github.io/divvy/index.html","id":"bivalves-package-data","dir":"","previous_headings":"Usage examples","what":"bivalves: Package data","title":"Spatial Subsampling of Biodiversity Occurrence Data","text":"(Palaeo)ecologists often want inspect basic information taxon occurrence datasets number occurrences, number unique localities, general size position study region, biodiversity. may initial step become acquainted data, may final step analysis estimate ecological variables interest. Let’s load one example datasets divvy demonstrate functions may help analyse . occurrences latitude-longitude point coordinates Pliocene bivalves Paleobiology Database; proceeding , let’s rasterise equal-area grid, common starting point biogeography analysis.","code":"library(divvy) data('bivalves')  # initialise Equal Earth projected coordinates library(terra) rWorld <- rast() prj <- 'EPSG:8857' rPrj <- project(rWorld, prj, res = 200000) # 200,000m is approximately 2 degrees values(rPrj) <- 1:ncell(rPrj)  # coordinate column names for the current and target coordinate reference system xyCartes <- c('paleolng','paleolat') xyCell   <- c('cellX','cellY')  # extract cell number and centroid coordinates associated with each occurrence llOccs <- vect(bivalves, geom = xyCartes, crs = 'epsg:4326') prjOccs <- project(llOccs, prj) bivalves$cell <- cells(rPrj, prjOccs)[,'cell'] bivalves[, xyCell] <- xyFromCell(rPrj, bivalves$cell)"},{"path":"https://gawainantell.github.io/divvy/index.html","id":"uniqify-subset-to-unique-occurrences","dir":"","previous_headings":"Usage examples","what":"uniqify: Subset to unique occurrences","title":"Spatial Subsampling of Biodiversity Occurrence Data","text":"Now let’s examine data divvy functions. First, can apply uniqify leave duplicate occurrences taxon within grid cell. shortens dataset (thereby reduces memory use) half.","code":"nrow(bivalves) #> [1] 8095 bivalves <- uniqify(bivalves, taxVar = 'genus', xy = xyCell) nrow(bivalves) #> [1] 3061"},{"path":"https://gawainantell.github.io/divvy/index.html","id":"sdsumry-summary-spatial-and-diversity-metrics","dir":"","previous_headings":"Usage examples","what":"sdSumry: Summary spatial and diversity metrics","title":"Spatial Subsampling of Biodiversity Occurrence Data","text":"many taxa ? many sites (equal-area grid cells)? many degrees latitude sites span? sdSumry function returns related spatial diversity metadata. just 3000 unique taxon-site occurrences, including 550 genera 157 grid cells across 137 degrees latitude.","code":"sdSumry(bivalves, taxVar = 'genus', xy = xyCell, crs = prj) #>      nOcc nLoc centroidX centroidY latRange greatCircDist meanPairDist #> [1,] 3061  157 -434404.9   1647720 137.4159      28917.12     11375.07 #>      minSpanTree     SCOR nTax #> [1,]    93349.91 20.64401  550"},{"path":"https://gawainantell.github.io/divvy/index.html","id":"rangesize-calculate-geographic-range-size","dir":"","previous_headings":"Usage examples","what":"rangeSize: Calculate geographic range size","title":"Spatial Subsampling of Biodiversity Occurrence Data","text":"Maybe aren’t interested community ecology instead care geographic distribution focal taxa, mussel Mytilus scallop Yabepecten. Provide coordinates two taxa divvy’s rangeSize function: Mytilus observed 18 grid cells spread tens thousands kilometers. contrast, Yabepecten occurs two localities, 200 km apart grid cell centroids. back-transform two locality’s coordinates Equal Earth projection familiar latitude-longitude, can tell Yabepecten reported northern Honshu, Japan (140-141 E longitude, 40-42 N latitude).","code":"myti <- bivalves[bivalves$genus == 'Mytilus',    xyCell] yabe <- bivalves[bivalves$genus == 'Yabepecten', xyCell]  rangeSize(myti, crs = prj) #>      nLoc centroidX centroidY latRange greatCircDist meanPairDist minSpanTree #> [1,]   18  67152.05   4750551 99.31458      22351.73     10390.96    37303.68 rangeSize(yabe, crs = prj) #>      nLoc centroidX centroidY latRange greatCircDist meanPairDist minSpanTree #> [1,]    2  11856041   5039440 1.808585           200          200         200 yabeVect <- vect(yabe, geom = xyCell, crs = prj) project(yabeVect, 'epsg:4326') #>  class       : SpatVector  #>  geometry    : points  #>  dimensions  : 2, 0  (geometries, attributes) #>  extent      : 139.6679, 141.3001, 40.16519, 41.97377  (xmin, xmax, ymin, ymax) #>  coord. ref. : lon/lat WGS 84 (EPSG:4326)"},{"path":"https://gawainantell.github.io/divvy/index.html","id":"cookies-subsample-global-data-into-equivalent-regions","dir":"","previous_headings":"Usage examples","what":"cookies: Subsample global data into equivalent regions","title":"Spatial Subsampling of Biodiversity Occurrence Data","text":"bivalves dataset spans world’s oceans. interested question diversity Pliocene time step compares diversity earlier interval geographic sampling coverage much limited, ’d account different data distribution—otherwise, ’d unfairly estimate well-sampled Pliocene far diverse. Geographic standardisation area (acreage number sites studied) dispersion (amount sites spread apart) allows fair comparisons ecological variables like richness, whether time steps, environments, comparison groups heterogeneous spatial coverage. divvy offers three functions subsampling (cookies, clustr, bandit) differ standardise dispersion. easiest form subsampling visualise applying circular constraint define bounds subsample region. Within region, given number sites selected, standardise area. , let’s take 10 subsamples bivalves occurrences, containing 12 sites within circular region 1500km (size Australia.) map one possible subsample (red, regional constraint drawn around ). Sites included subsample, including one within regional constraint, plotted blue.  individual subsample (one data.frame element returned list object) contains occurrences subsampled sites. ’s peek first subsample, show ’s just subset bivalves. subsample information structure original dataset, can analogously calculate summary spatial diversity data using sdSumry. row returned matrix corresponds one ten subsamples. small group replicate subsamples, regional richness ranges 117 194 genera. number localities always 12, specified , dispersion subsamples always within upper bound set diameter 3,000km (e.g. maximum great circle distance across subsample’s sites 2807km).","code":"set.seed(1) circLocs <- cookies(dat = bivalves, xy = xyCell,                      iter = 10, nSite = 12, r = 1500,                      crs = prj, output = 'full') str(circLocs[[1]]) #> 'data.frame':    338 obs. of  12 variables: #>  $ genus        : chr  \"Anomia\" \"Chlamys\" \"Mercenaria\" \"Ostrea\" ... #>  $ paleolng     : num  -80.5 -80.5 -80.5 -80.5 -87.4 ... #>  $ paleolat     : num  27.5 27.5 27.5 27.5 31 ... #>  $ collection_no: int  41496 41496 41496 41496 41824 58893 58893 58893 58893 58893 ... #>  $ reference_no : int  11119 11119 11119 11119 11118 16700 16700 16700 16700 16700 ... #>  $ environment  : chr  \"marine indet.\" \"marine indet.\" \"marine indet.\" \"marine indet.\" ... #>  $ max_ma       : num  5.33 5.33 5.33 5.33 5.33 ... #>  $ min_ma       : num  3.6 3.6 3.6 3.6 3.6 ... #>  $ accepted_name: chr  \"Anomia simplex\" \"Chlamys\" \"Mercenaria campechiensis\" \"Ostrea\" ... #>  $ cell         : num  4178 4178 4178 4178 3832 ... #>  $ cellX        : num  -7343959 -7343959 -7343959 -7343959 -7743959 ... #>  $ cellY        : num  3539440 3539440 3539440 3539440 3939440 ... sdSumry(circLocs, taxVar = 'genus', xy = xyCell, crs = prj) #>    nOcc nLoc   centroidX centroidY latRange greatCircDist meanPairDist #> 1   338   12  -6977292.4   4156106 10.25901      1612.452     781.6607 #> 2   265   12 -10160625.7   4072773 17.14477      2039.608     910.6453 #> 3   410   12  -6727292.4   2356106 17.67042      2720.294    1289.9956 #> 4   252   12 -10127292.4   3889440 18.77490      2209.072     888.0877 #> 5   460   12  -6993959.1   4056106 11.91278      1720.465     757.5157 #> 6   446   12    406040.9   5589440 11.37344      1562.050     833.9107 #> 7   293   12 -10177292.4   4239440 20.61302      2408.319     866.7620 #> 8   224   12 -10127292.4   5239440 27.00700      2807.134    1119.3347 #> 9   446   12    406040.9   5589440 11.37344      1562.050     833.9107 #> 10  350   12    256040.9   5389440 14.91345      1811.077    1047.1642 #>    minSpanTree     SCOR nTax #> 1     2814.214 33.87300  141 #> 2     2800.000 26.46397  121 #> 3     4097.770 40.52424  194 #> 4     2847.214 25.14927  117 #> 5     2731.371 48.65573  166 #> 6     3402.094 44.22359  190 #> 7     2965.685 29.02605  130 #> 8     3665.081 21.11620  121 #> 9     3402.094 44.22359  190 #> 10    4287.575 33.92261  163"},{"path":"https://gawainantell.github.io/divvy/reference/bandit.html","id":null,"dir":"Reference","previous_headings":"","what":"Rarefy localities within latitudinal bands — bandit","title":"Rarefy localities within latitudinal bands — bandit","text":"bandit subsamples spatial point data specified number sites within bins equal latitude","code":""},{"path":"https://gawainantell.github.io/divvy/reference/bandit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rarefy localities within latitudinal bands — bandit","text":"","code":"bandit(   dat,   xy,   iter,   nSite,   bin,   centr = FALSE,   absLat = FALSE,   maxN = 90,   maxS = -90,   crs = \"epsg:4326\",   output = \"locs\" )"},{"path":"https://gawainantell.github.io/divvy/reference/bandit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rarefy localities within latitudinal bands — bandit","text":"dat data.frame matrix containing coordinate columns xy associated variables, e.g. taxon names. xy vector two elements, specifying name numeric position columns dat containing coordinates, e.g. longitude latitude. Coordinates shared sampling sites identical, sites raster cells, coordinates usually expected cell centroids. iter number times subsample localities within latitudinal band. nSite quota unique locations include subsample. bin positive numeric value latitudinal band width, degrees. centr Logical: bin center cover equator (TRUE) equator mark boundary lowest-latitude northern southern bins (FALSE, default)? Ignored absLat = TRUE. absLat Logical: absolute values latitude evaluated? absLat = TRUE, centr argument ignored. maxN Optional argument specify northmost limit subsampling, less 90 degrees. maxS Optional argument specify southmost limit subsampling, -90 degrees. negative value southern hemisphere. crs Coordinate reference system GDAL text string, EPSG code, object class crs. Default latitude-longitude (EPSG:4326). output Whether returned data two columns subsample site coordinates (output = 'locs') subset rows dat associated coordinates (output = 'full').","code":""},{"path":"https://gawainantell.github.io/divvy/reference/bandit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rarefy localities within latitudinal bands — bandit","text":"list subsamples, data.frame containing coordinates subsampled localities (output = 'locs') subset occurrences dat associated coordinates (output = 'full'). latitudinal bounds subsample specified name list. localities given interval draw subsample, interval omitted output.","code":""},{"path":"https://gawainantell.github.io/divvy/reference/bandit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rarefy localities within latitudinal bands — bandit","text":"bandit() rarefies number spatial sites within latitudinal ranges specified bin width. (Compare cookies() clustr(), spatially subsample specified extent without regard latitudinal position.) Cases appropriate control latitudinal spread localities include characterisations latitudinal diversity gradients (e.g. Marcot 2016) comparisons ecosystem parameters covary strongly latitude (e.g. diversity reefal vs. non-reefal habitats). Note total surface area Earth within equal-latitudinal increments decreases equator towards poles; bandit() standardises amount sites/area encompassed subsample, total area available species inhabit. divvy subsampling functions, sites within given regional/latitudinal subsample selected without replacement. calculate integer number degrees given latitudinal range divides evenly, palaeoverse package (v 1.2.1) provides palaeoverse::lat_bins() function argument fit = TRUE.","code":""},{"path":"https://gawainantell.github.io/divvy/reference/bandit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Rarefy localities within latitudinal bands — bandit","text":"Allen2020divvy Marcot2016divvy","code":""},{"path":[]},{"path":"https://gawainantell.github.io/divvy/reference/bandit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rarefy localities within latitudinal bands — bandit","text":"","code":"# load bivalve occurrences to rasterise library(terra) #> terra 1.8.42 data(bivalves)  # initialise Equal Earth projected coordinates rWorld <- rast() prj <- 'EPSG:8857' rPrj <- project(rWorld, prj, res = 200000) # 200,000m is approximately 2 degrees  # coordinate column names for the current and target coordinate reference system xyCartes <- c('paleolng','paleolat') xyCell   <- c('centroidX','centroidY')  # project occurrences and retrieve cell centroids in new coordinate system llOccs <- vect(bivalves, geom = xyCartes, crs = 'epsg:4326') prjOccs <- project(llOccs, prj) cellIds <- cells(rPrj, prjOccs)[,'cell'] bivalves[, xyCell] <- xyFromCell(rPrj, cellIds)  # subsample 20 equal-area sites within 10-degree bands of absolute latitude n <- 20 reps <- 100 set.seed(11) bandAbs <- bandit(dat = bivalves, xy = xyCell,                   iter = reps, nSite = n, output = 'full',                   bin = 10, absLat = TRUE,                   crs = prj ) head(bandAbs[[1]]) # inspect first subsample #>       genus paleolng paleolat collection_no reference_no    environment max_ma #> 61 Placamen   122.84    12.21         41525        11125 coastal indet.  5.333 #> 62  Anadara   122.84    12.21         41524        11125 coastal indet.  5.333 #> 63  Anadara   122.84    12.21         41524        11125 coastal indet.  5.333 #> 64  Anadara   122.84    12.21         41524        11125 coastal indet.  5.333 #> 65  Corbula   122.84    12.21         41524        11125 coastal indet.  5.333 #> 66  Corbula   122.84    12.21         41524        11125 coastal indet.  5.333 #>    min_ma                      accepted_name centroidX centroidY #> 61  2.588                           Placamen  11656041   1539440 #> 62  2.588        Anadara (Anadara) antiquata  11656041   1539440 #> 63  2.588         Anadara (Anadara) biformis  11656041   1539440 #> 64  2.588                            Anadara  11656041   1539440 #> 65  2.588 Corbula (Notocorbula) fortisulcata  11656041   1539440 #> 66  2.588                            Corbula  11656041   1539440 names(bandAbs)[1] # degree interval (absolute value) of first subsample #> [1] \"[10,20)\" #> [1] \"[10,20)\" unique(names(bandAbs)) # all intervals containing sufficient data #> [1] \"[10,20)\" \"[20,30)\" \"[30,40)\" \"[40,50)\" #> [1] \"[10,20)\" \"[20,30)\" \"[30,40)\" \"[40,50)\" # note insufficient coverage to subsample at equator or above 50 degrees  # subsample 20-degree bands, where central band spans the equator # (-10 S to 10 N latitude), as in Allen et al. (2020) # (An alternative, finer-grain way to divide 180 degrees evenly into an # odd number of bands would be to set 'bin' = 4.) bandCent <- bandit(dat = bivalves, xy = xyCell,                    iter = reps, nSite = n, output = 'full',                    bin = 20, centr = TRUE, absLat = FALSE,                    crs = prj ) unique(names(bandCent)) # all intervals containing sufficient data #> [1] \"[-50,-30)\" \"[10,30)\"   \"[30,50)\"   #> [1] \"[-50,-30)\" \"[10,30)\" \"[30,50)\""},{"path":"https://gawainantell.github.io/divvy/reference/bivalves.html","id":null,"dir":"Reference","previous_headings":"","what":"Paleobiology Database occurrences of Pliocene fossil bivalves — bivalves","title":"Paleobiology Database occurrences of Pliocene fossil bivalves — bivalves","text":"dataset containing (palaeo)coordinates genus identifications 8,000 marine bivalves Pliocene (ca. 5.3-2.6 Ma). Records uncertain unaccepted taxonomic names, non-marine palaeo-environments, missing coordinates excluded original download (24 June 2022).","code":""},{"path":"https://gawainantell.github.io/divvy/reference/bivalves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Paleobiology Database occurrences of Pliocene fossil bivalves — bivalves","text":"","code":"bivalves"},{"path":"https://gawainantell.github.io/divvy/reference/bivalves.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Paleobiology Database occurrences of Pliocene fossil bivalves — bivalves","text":"data frame 8095 rows 9 variables: genus Latin genus identification. Subgenera elevated. paleolng, paleolat Coordinates occurrence, rotated palaeogeographic location tectonic plate model GPlates collection_no, reference_no Unique identifiers collection published reference containing occurrence environment One 23 marine environment categories max_ma, min_ma Bounds age estimate occurrence accepted_name Original identification, including subgenus species epithet applicable, according latest PBDB accepted taxonomy time download","code":""},{"path":"https://gawainantell.github.io/divvy/reference/bivalves.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Paleobiology Database occurrences of Pliocene fossil bivalves — bivalves","text":"https://paleobiodb.org/","code":""},{"path":"https://gawainantell.github.io/divvy/reference/classRast.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert point environment data to a raster of majority-environment classes — classRast","title":"Convert point environment data to a raster of majority-environment classes — classRast","text":"Given point occurrences environmental categories, classRast generates raster grid cell values specifying majority environment therein.","code":""},{"path":"https://gawainantell.github.io/divvy/reference/classRast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert point environment data to a raster of majority-environment classes — classRast","text":"","code":"classRast(grid, dat = NULL, xy, env, cutoff)"},{"path":"https://gawainantell.github.io/divvy/reference/classRast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert point environment data to a raster of majority-environment classes — classRast","text":"grid SpatRaster use template resolution, extent, coordinate reference system returned object. Values can empty. dat Either data.frame matrix xy env column names, empty argument. xy vector specifying name numeric position columns dat containing coordinates, dat supplied, 2-column data.frame matrix coordinate values. env name numeric position column dat containing categorical environmental variable, dat supplied, vector environmental values. cutoff (decimal) proportion incidences environmental category cell assigned category. cutoff must greater 0.5.","code":""},{"path":"https://gawainantell.github.io/divvy/reference/classRast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert point environment data to a raster of majority-environment classes — classRast","text":"raster class SpatRaster defined terra package","code":""},{"path":"https://gawainantell.github.io/divvy/reference/classRast.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert point environment data to a raster of majority-environment classes — classRast","text":"cutoff threshold inclusive bound: environmental incidence proportions greater equal cutoff assign cell values majority environmental class. instance, category represents 65% occurrences cell cutoff = 0.65, returned value cell . single category cell meets exceeds representation necessary reach given cutoff, value returned cell indet., indeterminate. Cells lacking environmental occurrences altogether return NA values. env object can contain two classes, many cases less likely individual class attain absolute majority finely divided classes . example, three classes, , B, C, relative proportions 20%, 31%, 49%, cell value returned indet. single class can attain cutoff 50%, despite class C largest relative representation. Missing environment values point data coded NA, e.g. 'unknown'. classRast() ignores NA occurrences tallying environmental occurrences cutoff. However, NA occurrences still count determining NA status cells raster: cell containing occurrences NA value classified indet., NA. , grid cell encompassing original point data non-NA. Antell others (2020) set cutoff 0.8, based threshold Nürnberg Aberhan (2013) used classify environmental preferences taxa. coordinates associated points given respect coordinate reference system (CRS) target raster grid, e.g. given latitude-longitude, Equal Earth projected coordinates, CRS. CRS SpatRaster object can retrieved terra::crs() (optional helpful argument describe = TRUE).","code":""},{"path":"https://gawainantell.github.io/divvy/reference/classRast.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Convert point environment data to a raster of majority-environment classes — classRast","text":"Antell2020divvy Nurnberg2013divvy","code":""},{"path":"https://gawainantell.github.io/divvy/reference/classRast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert point environment data to a raster of majority-environment classes — classRast","text":"","code":"library(terra) # work in Equal Earth projected coordinates prj <- 'EPSG:8857' # generate point occurrences in a small area of Northern Africa n <- 100 set.seed(5) x <- runif(n,  0, 30) y <- runif(n, 10, 30) # generate an environmental variable with a latitudinal gradient # more habitat type 0 (e.g. rock) near equator, more 1 (e.g. grassland) to north env <- rbinom(n, 1, prob = (y-10)/20) env[env == 0] <- 'rock' env[env == 1] <- 'grass' # units for Equal Earth are meters, so if we consider x and y as given in km, x <- x * 1000 y <- y * 1000 ptsDf <- data.frame(x, y, env) # raster for study area at 5-km resolution r <- rast(resolution = 5*1000, crs = prj,           xmin = 0, xmax = 30000, ymin = 10000, ymax = 30000)  binRast <- classRast(grid = r, dat = ptsDf, xy = c('x', 'y'),                      env = 'env', cutoff = 0.6) binRast #> class       : SpatRaster  #> dimensions  : 4, 6, 1  (nrow, ncol, nlyr) #> resolution  : 5000, 5000  (x, y) #> extent      : 0, 30000, 10000, 30000  (xmin, xmax, ymin, ymax) #> coord. ref. : WGS 84 / Equal Earth Greenwich (EPSG:8857)  #> source(s)   : memory #> categories  : mainClass  #> name        : mainClass  #> min value   :     grass  #> max value   :    indet.   # plot environment classification vs. original points plot(binRast, col = c('lightgreen', 'grey60', 'white')) points(ptsDf[env=='rock', ], pch = 16, cex = 1.2) # occurrences of given habitat points(ptsDf[env=='grass',], pch =  1, cex = 1.2)   # classRast can also accept more than 2 environmental classes:  # add a 3rd environmental class with maximum occurrence in bottom-left grid cell newEnv <- data.frame('x' = rep(0,       10),                      'y' = rep(10000,   10),                      'env' = rep('new', 10)) ptsDf <- rbind(ptsDf, newEnv) binRast <- classRast(grid = r, dat = ptsDf, xy = c('x', 'y'),                      env = 'env', cutoff = 0.6) plot(binRast, col = c('lightgreen', 'grey60', 'purple', 'white'))"},{"path":"https://gawainantell.github.io/divvy/reference/clustr.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster localities within regions of nearest neighbours — clustr","title":"Cluster localities within regions of nearest neighbours — clustr","text":"Spatially subsample dataset based minimum spanning trees connecting points within regions set extent, optional rarefaction site quota.","code":""},{"path":"https://gawainantell.github.io/divvy/reference/clustr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster localities within regions of nearest neighbours — clustr","text":"","code":"clustr(   dat,   xy,   iter,   nSite = NULL,   distMax,   nMin = 3,   crs = \"epsg:4326\",   output = \"locs\" )"},{"path":"https://gawainantell.github.io/divvy/reference/clustr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster localities within regions of nearest neighbours — clustr","text":"dat data.frame matrix containing coordinate columns xy associated variables, e.g. taxon names. xy vector two elements, specifying name numeric position columns dat containing coordinates, e.g. longitude latitude. Coordinates shared sampling sites identical, sites raster cells, coordinates usually expected cell centroids. iter number spatial subsamples return nSite quota unique locations include subsample. distMax Numeric value maximum diameter (km) allowed across locations subsample nMin Numeric value minimum number sites included every returned subsample. nSite supplied, nMin ignored. crs Coordinate reference system GDAL text string, EPSG code, object class crs. Default latitude-longitude (EPSG:4326). output Whether returned data two columns subsample site coordinates (output = 'locs') subset rows dat associated coordinates (output = 'full').","code":""},{"path":"https://gawainantell.github.io/divvy/reference/clustr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster localities within regions of nearest neighbours — clustr","text":"list length iter. element data.frame (matrix, dat matrix output = 'full'). nSite supplied, element contains nSite observations. output = 'locs' (default), coordinates subsampling locations returned. output = 'full', dat columns returned rows associated subsampled locations.","code":""},{"path":"https://gawainantell.github.io/divvy/reference/clustr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cluster localities within regions of nearest neighbours — clustr","text":"Lagomarcino Miller (2012) developed iterative approach aggregating localities build clusters based convex hulls, inspired species-area curve analysis (Scheiner 2003). Close et al. (2017, 2020) refined approach changed proximity metric minimum convex hull area minimum spanning tree length. present implementation adapts code Close et al. (2020) add option site rarefaction cluster construction grow trees random starting points iter number times (instead deterministic, exhaustive iteration every unique location). function takes single location starting (seed) point; seed nearest neighbour initiate spatial cluster. distance two points first branch minimum spanning tree cluster. location shortest distance points already within cluster grouped next, distance (branch) added sum tree length. iterative process continues largest distance two points cluster exceed distMax km. rare case multiple candidate points tied minimum distance cluster, one point selected random next include. tree fewer nMin points prohibited. case nSite supplied, nMin argument ignored, tree fewer nSite points prohibited. building tree described , random set nSite points within cluster taken (without replacement). nSite argument makes clustr() comparable cookies() spatially standardises extent area/locality number. performance clustr() designed assumption iter much larger number unique localities. Internal code first calculates full minimum spanning tree every viable starting point samples trees (.e. resamples optionally rarefies) specified number iterations. sequence means total run-time increases marginally even iter increases greatly. However, large number sites, particularly large number densely-spaced sites, calculations slow even small number iterations.","code":""},{"path":"https://gawainantell.github.io/divvy/reference/clustr.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Cluster localities within regions of nearest neighbours — clustr","text":"Antell2020divvy Close2017divvy Close2020divvy Lagomarcino2012divvy Scheiner2003divvy","code":""},{"path":[]},{"path":"https://gawainantell.github.io/divvy/reference/clustr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster localities within regions of nearest neighbours — clustr","text":"","code":"# generate occurrences: 10 lat-long points in modern Australia n <- 10 x <- seq(from = 140, to = 145, length.out = n) y <- seq(from = -20, to = -25, length.out = n) pts <- data.frame(x, y)  # sample 5 sets of 4 locations no more than 400km across clustr(dat = pts, xy = 1:2, iter = 5,        nSite = 4, distMax = 400) #> [[1]] #>           x         y #> 10 145.0000 -25.00000 #> 8  143.8889 -23.88889 #> 9  144.4444 -24.44444 #> 6  142.7778 -22.77778 #>  #> [[2]] #>          x         y #> 3 141.1111 -21.11111 #> 5 142.2222 -22.22222 #> 4 141.6667 -21.66667 #> 2 140.5556 -20.55556 #>  #> [[3]] #>           x         y #> 6  142.7778 -22.77778 #> 10 145.0000 -25.00000 #> 7  143.3333 -23.33333 #> 8  143.8889 -23.88889 #>  #> [[4]] #>          x         y #> 8 143.8889 -23.88889 #> 4 141.6667 -21.66667 #> 7 143.3333 -23.33333 #> 6 142.7778 -22.77778 #>  #> [[5]] #>           x         y #> 7  143.3333 -23.33333 #> 10 145.0000 -25.00000 #> 9  144.4444 -24.44444 #> 8  143.8889 -23.88889 #>"},{"path":"https://gawainantell.github.io/divvy/reference/collSilur.html","id":null,"dir":"Reference","previous_headings":"","what":"Paleobiology Database collections of Silurian marine fossils — collSilur","title":"Paleobiology Database collections of Silurian marine fossils — collSilur","text":"dataset containing (palaeo)coordinates recorded marine environment 8,000 PBDB fossil collections Silurian, formatted downloaded Paleobiology Database 24 June 2022.","code":""},{"path":"https://gawainantell.github.io/divvy/reference/collSilur.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Paleobiology Database collections of Silurian marine fossils — collSilur","text":"","code":"collSilur"},{"path":"https://gawainantell.github.io/divvy/reference/collSilur.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Paleobiology Database collections of Silurian marine fossils — collSilur","text":"data frame 8345 rows 7 variables: paleolng, paleolat Coordinates collection, rotated palaeogeographic location tectonic plate model GPlates collection_no, reference_no Unique identifier collection published reference environment One 23 marine environment categories max_ma, min_ma Bounds age estimate collection","code":""},{"path":"https://gawainantell.github.io/divvy/reference/collSilur.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Paleobiology Database collections of Silurian marine fossils — collSilur","text":"https://paleobiodb.org/","code":""},{"path":"https://gawainantell.github.io/divvy/reference/cookies.html","id":null,"dir":"Reference","previous_headings":"","what":"Rarefy localities within circular regions of standard area — cookies","title":"Rarefy localities within circular regions of standard area — cookies","text":"Spatially subsample dataset produce samples standard area extent.","code":""},{"path":"https://gawainantell.github.io/divvy/reference/cookies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rarefy localities within circular regions of standard area — cookies","text":"","code":"cookies(   dat,   xy,   iter,   nSite,   r,   weight = FALSE,   crs = \"epsg:4326\",   output = \"locs\" )"},{"path":"https://gawainantell.github.io/divvy/reference/cookies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rarefy localities within circular regions of standard area — cookies","text":"dat data.frame matrix containing coordinate columns xy associated variables, e.g. taxon names. xy vector two elements, specifying name numeric position columns dat containing coordinates, e.g. longitude latitude. Coordinates shared sampling sites identical, sites raster cells, coordinates usually expected cell centroids. iter number spatial subsamples return nSite quota unique locations include subsample. r Numeric value radius (km) defining circular extent spatial subsample. weight Whether sites within subsample radius drawn random (weight = FALSE, default) probability inversely proportional square distance centre subsample region (weight = TRUE). crs Coordinate reference system GDAL text string, EPSG code, object class crs. Default latitude-longitude (EPSG:4326). output Whether returned data two columns subsample site coordinates (output = 'locs') subset rows dat associated coordinates (output = 'full').","code":""},{"path":"https://gawainantell.github.io/divvy/reference/cookies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rarefy localities within circular regions of standard area — cookies","text":"list length iter. list element data.frame matrix (matching class dat) nSite observations. output = 'locs' (default), coordinates subsampling locations returned. output = 'full', dat columns returned rows associated subsampled locations. weight = TRUE, first observation returned subsample data.frame corresponds seed point. weight = FALSE, observations listed random order drawn.","code":""},{"path":"https://gawainantell.github.io/divvy/reference/cookies.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rarefy localities within circular regions of standard area — cookies","text":"function takes single location starting (seed) point circumscribes buffer r km around . Buffer circles span antemeridian (180 degrees longitude) wrapped multipolygon prevent artificial truncation. standardising radial extent, sites drawn within circular extent quota nSite met. Sites sampled without replacement, location used seed point within r km distance least nSite-1 locations. method introduced Antell et al. (2020) described detail Methods S1 therein. probability drawing site within standardised extent either equal (weight = FALSE) proportional inverse-square distance seed point (weight = TRUE), clusters subsample locations tightly. geodetic coordinates (latitude-longitude), distances calculated along great circle arcs. Cartesian coordinates, distances calculated Euclidian space, units associated projection CRS (e.g. metres).","code":""},{"path":"https://gawainantell.github.io/divvy/reference/cookies.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Rarefy localities within circular regions of standard area — cookies","text":"Antell2020divvy","code":""},{"path":[]},{"path":"https://gawainantell.github.io/divvy/reference/cookies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rarefy localities within circular regions of standard area — cookies","text":"","code":"# generate occurrences: 10 lat-long points in modern Australia n <- 10 x <- seq(from = 140, to = 145, length.out = n) y <- seq(from = -20, to = -25, length.out = n) pts <- data.frame(x, y)  # sample 5 sets of 3 occurrences within 200km radius cookies(dat = pts, xy = 1:2, iter = 5,         nSite = 3, r = 200) #> [[1]] #>          x         y #> 5 142.2222 -22.22222 #> 3 141.1111 -21.11111 #> 4 141.6667 -21.66667 #>  #> [[2]] #>           x         y #> 8  143.8889 -23.88889 #> 9  144.4444 -24.44444 #> 10 145.0000 -25.00000 #>  #> [[3]] #>           x         y #> 8  143.8889 -23.88889 #> 10 145.0000 -25.00000 #> 9  144.4444 -24.44444 #>  #> [[4]] #>          x         y #> 4 141.6667 -21.66667 #> 5 142.2222 -22.22222 #> 6 142.7778 -22.77778 #>  #> [[5]] #>          x         y #> 1 140.0000 -20.00000 #> 5 142.2222 -22.22222 #> 3 141.1111 -21.11111 #>"},{"path":"https://gawainantell.github.io/divvy/reference/occSilur.html","id":null,"dir":"Reference","previous_headings":"","what":"Paleobiology Database occurrences of Silurian fossil brachiopods — occSilur","title":"Paleobiology Database occurrences of Silurian fossil brachiopods — occSilur","text":"dataset containing (palaeo)coordinates genus identifications 13,500 marine brachiopods Silurian (443.1-419 Ma). Records uncertain unaccepted taxonomic names, non-marine palaeo-environments, missing coordinates excluded original download (29 July 2022). Taxonomic synonymisation removal stratigraphic outliers follows fossilbrush vignette example cross-correlation Sepkoski range-database [fossilbrush::sepkoski()].","code":""},{"path":"https://gawainantell.github.io/divvy/reference/occSilur.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Paleobiology Database occurrences of Silurian fossil brachiopods — occSilur","text":"","code":"occSilur"},{"path":"https://gawainantell.github.io/divvy/reference/occSilur.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Paleobiology Database occurrences of Silurian fossil brachiopods — occSilur","text":"data frame 13502 rows 11 variables: order, family, genus Latin order, family, genus name, synonymised Sepkoski database paleolng, paleolat Coordinates occurrence, rotated palaeogeographic location tectonic plate model GPlates collection_no, reference_no Unique identifiers collection published reference containing occurrence environment One 23 marine environment categories max_ma, min_ma Bounds age estimate occurrence, according ICS 2013 geologic time scale. accepted_name Original identification, including subgenus species epithet applicable, according latest PBDB accepted taxonomy time download","code":""},{"path":"https://gawainantell.github.io/divvy/reference/occSilur.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Paleobiology Database occurrences of Silurian fossil brachiopods — occSilur","text":"https://paleobiodb.org/","code":""},{"path":"https://gawainantell.github.io/divvy/reference/rangeSize.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate common metrics of spatial distribution — rangeSize","title":"Calculate common metrics of spatial distribution — rangeSize","text":"Calculate occurrence count, centroid coordinates, latitudinal range (degrees), great circle distance (km), mean pairwise distance (km), summed minimum spanning tree length (km) spatial point coordinates.","code":""},{"path":"https://gawainantell.github.io/divvy/reference/rangeSize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate common metrics of spatial distribution — rangeSize","text":"","code":"rangeSize(coords, crs = \"epsg:4326\")"},{"path":"https://gawainantell.github.io/divvy/reference/rangeSize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate common metrics of spatial distribution — rangeSize","text":"coords 2-column data.frame matrix containing x- y-coordinates, respectively (e.g. longitude latitude). crs Coordinate reference system GDAL text string, EPSG code, object class crs. Default latitude-longitude (EPSG:4326).","code":""},{"path":"https://gawainantell.github.io/divvy/reference/rangeSize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate common metrics of spatial distribution — rangeSize","text":"1-row, 7-column matrix","code":""},{"path":"https://gawainantell.github.io/divvy/reference/rangeSize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate common metrics of spatial distribution — rangeSize","text":"Coordinates distances computed respect original coordinate reference system supplied, except calculation latitudinal range, projected coordinates transformed geodetic ones. crs unspecified, default points assumed given latitude-longitude distances calculated spherical geometry. Duplicate coordinates removed. single unique point supplied, distance measures returned NA.","code":""},{"path":"https://gawainantell.github.io/divvy/reference/rangeSize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate common metrics of spatial distribution — rangeSize","text":"","code":"# generate 20 occurrences for a pseudo-species # centred on Yellowstone National Park (latitude-longitude) # normally distributed with a standard deviation ~110 km set.seed(2) x <- rnorm(20, 110.5885, 2) y <- rnorm(20,  44.4280, 1) pts <- cbind(x,y)  rangeSize(pts) #>      nLoc centroidX centroidY latRange greatCircDist meanPairDist minSpanTree #> [1,]   20  110.9828  44.44622 4.542526      697.9476     269.6437    1855.473"},{"path":"https://gawainantell.github.io/divvy/reference/sdSumry.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate basic spatial coverage and diversity metrics — sdSumry","title":"Calculate basic spatial coverage and diversity metrics — sdSumry","text":"Summarise geographic scope position occurrence data, optionally estimate diversity evenness","code":""},{"path":"https://gawainantell.github.io/divvy/reference/sdSumry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate basic spatial coverage and diversity metrics — sdSumry","text":"","code":"sdSumry(   dat,   xy,   taxVar,   crs = \"epsg:4326\",   collections = NULL,   quotaQ = NULL,   quotaN = NULL,   omitDom = FALSE )"},{"path":"https://gawainantell.github.io/divvy/reference/sdSumry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate basic spatial coverage and diversity metrics — sdSumry","text":"dat data.frame matrix containing taxon names, coordinates, associated variables; list structures. xy vector two elements, specifying name numeric position columns dat containing coordinates, e.g. longitude latitude. Coordinates shared sampling sites identical, sites raster cells, coordinates usually expected cell centroids. taxVar name numeric position column containing taxonomic identifications. taxVar must class xy, e.g. numeric column position xy given vector numeric positions. crs Coordinate reference system GDAL text string, EPSG code, object class crs. Default latitude-longitude (EPSG:4326). collections name numeric position column containing unique collection IDs, e.g. 'collection_no' PBDB data downloads. quotaQ numeric value coverage (quorum) level perform coverage-based rarefaction (shareholder quorum subsampling). quotaN numeric value quota taxon occurrences subsample classical rarefaction. omitDom omitDom = TRUE quotaQ quotaN supplied, remove common taxon prior rarefaction. nTax evenness returned unaffected.","code":""},{"path":"https://gawainantell.github.io/divvy/reference/sdSumry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate basic spatial coverage and diversity metrics — sdSumry","text":"matrix spatial optional diversity metrics. dat list data.frame objects, output rows correspond input elements.","code":""},{"path":"https://gawainantell.github.io/divvy/reference/sdSumry.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate basic spatial coverage and diversity metrics — sdSumry","text":"sdSumry() compiles metadata sample list samples, spatial subsampling. function counts number collections (requested), taxon presences (excluding repeat incidences taxon given site), unique spatial sites; also calculates site centroid coordinates, latitudinal range (degrees), great circle distance (km), mean pairwise distance (km), summed minimum spanning tree length (km). Coordinates distances computed respect original coordinate reference system supplied, except calculation latitudinal range, projected coordinates transformed geodetic ones. crs unspecified, default points assumed given latitude-longitude distances calculated spherical geometry. first two diversity variables returned raw count observed taxa Summed Common species/taxon Occurrence Rate (SCOR). SCOR reflects degree taxa common/widespread decoupled richness abundance (Hannisdal et al. 2012). SCOR calculated sum across taxa log probability incidence, \\(\\lambda\\). given taxon, \\(\\lambda = -ln(1 - p)\\), \\(p\\) estimated fraction occupied sites. widespread taxa make large contribution assemblage SCOR, rare taxa relatively little influence. quotaQ supplied, sdSumry() rarefies richness given coverage value returns point estimate richness (Hill number 0) 95% confidence interval, well estimates evenness (Pielou's J) frequency-distribution sample coverage (given iNEXT$DataInfo). quotaN supplied, sdSumry() rarefies richness given number occurrence counts returns point estimate richness 95% confidence interval. Coverage-based classical rarefaction calculated iNEXT::estimateD() internally. details, diversity extrapolated sample coverage insufficient achieve specified rarefaction level, consult Chao Jost (2012) Hsieh et al. (2016).","code":""},{"path":"https://gawainantell.github.io/divvy/reference/sdSumry.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate basic spatial coverage and diversity metrics — sdSumry","text":"Chao2012divvy Hannisdal2012divvy Hsieh2016divvy","code":""},{"path":[]},{"path":"https://gawainantell.github.io/divvy/reference/sdSumry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate basic spatial coverage and diversity metrics — sdSumry","text":"","code":"# generate occurrences set.seed(9) x  <- sample(rep(1:5, 10)) y  <- sample(rep(1:5, 10)) # make some species 2x or 4x as common abund <- c(rep(4, 5), rep(2, 5), rep(1, 10)) sp <- sample(letters[1:20], 50, replace = TRUE, prob = abund) obs <- data.frame(x, y, sp)  # minimum sample data returned sdSumry(obs, c('x','y'), 'sp') #>      nOcc nLoc centroidX centroidY latRange greatCircDist meanPairDist #> [1,]   45   22  3.045289  2.909986        4      628.5192     297.7363 #>      minSpanTree     SCOR nTax #> [1,]    2332.473 2.234449   17  # also calculate evenness and coverage-based rarefaction diversity estimates sdSumry(obs, xy = c('x','y'), taxVar = 'sp', quotaQ = 0.7) #>   nOcc nLoc centroidX centroidY latRange greatCircDist meanPairDist minSpanTree #> 1   45   22  3.045289  2.909986        4      628.5192     297.7363    2332.473 #>       SCOR nTax  evenness coverage   SQSdiv SQSlow95 SQSupr95 #> 1 2.234449   17 0.9405151   0.8708 12.17405 8.323042 16.02506"},{"path":"https://gawainantell.github.io/divvy/reference/uniqify.html","id":null,"dir":"Reference","previous_headings":"","what":"Find unique (taxon) occurrence records — uniqify","title":"Find unique (taxon) occurrence records — uniqify","text":"Subset dataset unique spatial localities locality-taxon combinations.","code":""},{"path":"https://gawainantell.github.io/divvy/reference/uniqify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find unique (taxon) occurrence records — uniqify","text":"","code":"uniqify(dat, xy, taxVar = NULL, na.rm = TRUE)"},{"path":"https://gawainantell.github.io/divvy/reference/uniqify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find unique (taxon) occurrence records — uniqify","text":"dat data.frame matrix containing taxon names, coordinates, associated variables; list structures. xy vector two elements, specifying name numeric position columns dat containing coordinates, e.g. longitude latitude. Coordinates shared sampling sites identical, sites raster cells, coordinates usually expected cell centroids. taxVar name numeric position column containing taxonomic identifications. taxVar must class xy, e.g. numeric column position xy given vector numeric positions. na.rm records missing information removed? Default yes.","code":""},{"path":"https://gawainantell.github.io/divvy/reference/uniqify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find unique (taxon) occurrence records — uniqify","text":"object class columns dat, containing subset rows representing unique coordinates (xy supplied) unique taxon-site combinations (taxVar also supplied). first record spatial locality retained, taxVar specified, first record taxon locality.","code":""},{"path":"https://gawainantell.github.io/divvy/reference/uniqify.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find unique (taxon) occurrence records — uniqify","text":"na.rm argument applies coordinate values , taxVar supplied, taxon values. na.rm = FALSE, NA values retained treated value. Note divvy ignores rows missing coordinates subsampling functions cookies(), clustr(), bandit().","code":""},{"path":"https://gawainantell.github.io/divvy/reference/uniqify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find unique (taxon) occurrence records — uniqify","text":"","code":"# generate occurrence data x  <- rep(1, 10) y  <- c(rep(1, 5), 2:6) sp <- c(rep(letters[1:3], 2),         rep(letters[4:5], 2)) obs <- data.frame(x, y, sp)  # compare original and unique datasets: # rows 4 and 5 removed as duplicates of rows 1 and 2, respectively obs #>    x y sp #> 1  1 1  a #> 2  1 1  b #> 3  1 1  c #> 4  1 1  a #> 5  1 1  b #> 6  1 2  c #> 7  1 3  d #> 8  1 4  e #> 9  1 5  d #> 10 1 6  e uniqify(obs, taxVar = 3, xy = 1:2) #>    x y sp #> 1  1 1  a #> 2  1 1  b #> 3  1 1  c #> 6  1 2  c #> 7  1 3  d #> 8  1 4  e #> 9  1 5  d #> 10 1 6  e  # using taxon identifications or other third variable is optional uniqify(obs, xy = c('x', 'y')) #>    x y sp #> 1  1 1  a #> 6  1 2  c #> 7  1 3  d #> 8  1 4  e #> 9  1 5  d #> 10 1 6  e  # caution - data outside the taxon and occurrence variables # will be lost where associated with duplicate occurrences obs$notes <- letters[11:20] uniqify(obs, 1:2, 3) #>    x y sp notes #> 1  1 1  a     k #> 2  1 1  b     l #> 3  1 1  c     m #> 6  1 2  c     p #> 7  1 3  d     q #> 8  1 4  e     r #> 9  1 5  d     s #> 10 1 6  e     t # the notes 'n' and 'o' are absent in the output data"},{"path":[]},{"path":"https://gawainantell.github.io/divvy/news/index.html","id":"improvements-development-version","dir":"Changelog","previous_headings":"","what":"Improvements","title":"divvy (development version)","text":"Add citation file","code":""},{"path":"https://gawainantell.github.io/divvy/news/index.html","id":"divvy-101","dir":"Changelog","previous_headings":"","what":"divvy 1.0.1","title":"divvy 1.0.1","text":"CRAN release: 2025-04-14","code":""},{"path":"https://gawainantell.github.io/divvy/news/index.html","id":"bug-fixes-1-0-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"divvy 1.0.1","text":"Advanced minimum version numbers required R units Fixed specification units objects compatibility cbind","code":""},{"path":"https://gawainantell.github.io/divvy/news/index.html","id":"divvy-100","dir":"Changelog","previous_headings":"","what":"divvy 1.0.0","title":"divvy 1.0.0","text":"CRAN release: 2023-10-26","code":""},{"path":"https://gawainantell.github.io/divvy/news/index.html","id":"breaking-changes-1-0-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"divvy 1.0.0","text":"Changed function names rangeSizer rangeSize sdsumry sdSumry Removed siteId argument cookies uniqify convenient argument order sdSumry uniqify","code":""},{"path":"https://gawainantell.github.io/divvy/news/index.html","id":"bug-fixes-1-0-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"divvy 1.0.0","text":"Fixed CRS mistakes examples bandit classRast documentation Updated URL addresses vignettes","code":""},{"path":"https://gawainantell.github.io/divvy/news/index.html","id":"improvements-1-0-0","dir":"Changelog","previous_headings":"","what":"Improvements","title":"divvy 1.0.0","text":"Built pkgdown website Created unit tests Added detail function help documentation Updated examples avoid calling deprecated spatial packages","code":""},{"path":[]},{"path":"https://gawainantell.github.io/divvy/news/index.html","id":"new-0-2-0","dir":"Changelog","previous_headings":"","what":"New","title":"version 0.2.0","text":"Added second vignette, complementary example uses divvy functions","code":""},{"path":"https://gawainantell.github.io/divvy/news/index.html","id":"improvements-0-2-0","dir":"Changelog","previous_headings":"","what":"Improvements","title":"version 0.2.0","text":"Expanded README additional overview information code examples","code":""},{"path":[]},{"path":"https://gawainantell.github.io/divvy/news/index.html","id":"bug-fixes-0-1-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"version 0.1.1","text":"Patched bugs sdsumry breaking changes iNEXT returned objects Updated argument specifications compatibility latest version sf Adapted edge case equally-spaced occurrences","code":""},{"path":"https://gawainantell.github.io/divvy/news/index.html","id":"improvements-0-1-1","dir":"Changelog","previous_headings":"","what":"Improvements","title":"version 0.1.1","text":"Added NEWS.md file track changes package Added examples function documentation Specified returned values","code":""}]
